// Types
declare DWORD = UInt32
declare LPCSTR = ConstArrayPointer<ClangWideChar>
declare WINBOOL = Int32
declare BOOL = Int32

@rename('HINSTANCE') @byValue @struct declare class HINSTANCE {}
//declare HINSTANCE = ByValue<LHINSTANCE>
@rename('HWND') @byValue @struct declare class HWND {}
//declare HWND = ByValue<HWND>

@rename('ATOM') @struct declare class ATOM {}
@rename('WNDCLASS') @struct declare class WNDCLASS {
	// TODO new () @stack alloc
	// TODO @asIs -> rename to same, no mangle
	@rename('lpfnWndProc') var lpfnWndProc: (hwnd: HWND, uMsg: Message, wParam: WPARAM, lParam: LPARAM) => LRESULT
	@rename('hInstance') var hInstance: HINSTANCE
	@rename('lpszClassName') var lpszClassName: LPCSTR
}
@rename('WPARAM') @byValue @struct declare class WPARAM {}
@rename('LPARAM') @byValue @struct declare class LPARAM {}
@rename('LRESULT') @byValue @struct declare class LRESULT {}
@rename('PWSTR') @struct declare class PWSTR {}
@rename('MSG') @struct declare class MSG {
	// TODO new () @stack alloc
}
@rename('HDC') @byValue @struct declare class HDC {}
// TODO rect @byValue extends rect @struct instead of *as!*
@rename('RECT') @byValue @struct declare class RECT {}
@rename('RECT') @struct declare class LPRECT {}
@rename('HBRUSH') @byValue @struct declare class HBRUSH {}
@rename('HMENU') @struct declare class HMENU {}
@rename('LPVOID') @struct declare class LPVOID {}
@rename('PAINTSTRUCT') @struct declare class PAINTSTRUCT {
	@rename('rcPaint') var rcPaint: RECT
	//var u: Array<WNDCLASS>
}

// TODO enum WindowStyle {
// TODO 	WS_OVERLAPPEDWINDOW
// TODO }

let ws_overlapped: UInt32 = 0x00000000
let ws_caption: UInt32 = 0x00C00000
let ws_sysmenu: UInt32 = 0x00080000
let ws_thickframe: UInt32 = 0x00040000
let ws_minimizebox: UInt32 = 0x00020000
let ws_maximizebox: UInt32 = 0x00010000
let ws_overlappedwindow: UInt32 = ws_overlapped | ws_caption | ws_sysmenu | ws_thickframe | ws_minimizebox | ws_maximizebox

let cw_usedefault = 0x80000000i32
let color_window = 5

enum Message : UInt32 {
	WM_DESTROY = 0x0002
	WM_PAINT = 0x000F
}

// Functions
@rename('DefWindowProc') declare fun defWindowProc(hwnd: HWND, uMsg: Message, wParam: WPARAM, lParam: LPARAM): LRESULT
@rename('PostQuitMessage') declare fun postQuitMessage (nExitCode: Int): Void
@rename('RegisterClass') declare fun registerClass(lpWndClass: WNDCLASS): ATOM
@rename('CreateWindowEx') declare fun createWindowEx(dwExStyle: DWORD, lpClassName:LPCSTR, lpWindowName: LPCSTR, dwStyle: DWORD, x: Int, y: Int,nWidth: Int, nHeight: Int, hWndParent: HWND, hMenu: HMENU, hInstance: HINSTANCE, lpParam: LPVOID): HWND
@rename('BeginPaint') declare fun beginPaint(hWnd: HWND, lpPaint: PAINTSTRUCT): HDC
@rename('ShowWindow') declare fun showWindow(hWnd: HWND, nCmdShow: Int): WINBOOL
@rename('FillRect') declare fun fillRect(hDC: HDC, lprc: LPRECT, hbr: HBRUSH): Int
@rename('EndPaint') declare fun endPaint(hWnd: HWND, lpPaint: PAINTSTRUCT): BOOL
@rename('GetMessage') declare fun getMessage(lpMsg: MSG, hWnd: HWND, wMsgFilterMin: UInt32, wMsgFilterMax: UInt32): WINBOOL
@rename('TranslateMessage') declare fun translateMessage(lpMsg: MSG): WINBOOL
@rename('DispatchMessage') declare fun dispatchMessage(lpMsg: MSG): LRESULT
