//printf("Thank you for choosing Hexa".wide())
//console.log("Thank you for choosing Hexa")
console.logString("Thank you for choosing Hexa")

//class Test {
//	static var int: Int = 213
//}
//console.log(Test.int)


@rename('fgets') declare fun fgets(str: ArrayPointer<ClangChar>, num: Int, stream: FILE): ConstArrayPointer<ClangChar>

let buffer = malloc(100) as! ArrayPointer<ClangChar>
//console.logString("Enter something")
//fgets(buffer, 100, stdin)
//console.logString(String.fromUTF8z(buffer as! ConstArrayPointer<UInt8>))

// Types
declare DWORD = UInt32
declare LPCSTR = ConstArrayPointer<ClangWideChar>
declare WINBOOL = Int32
declare BOOL = Int32

@rename('HINSTANCE') @byValue @struct declare class HINSTANCE {}
//declare HINSTANCE = ByValue<LHINSTANCE>
@rename('HWND') @byValue @struct declare class HWND {}
//declare HWND = ByValue<HWND>

@rename('ATOM') @struct declare class ATOM {}
@rename('WNDCLASS') @struct declare class WNDCLASS {
	// TODO new () @stack alloc
	// TODO @asIs -> rename to same, no mangle
	@rename('lpfnWndProc') var lpfnWndProc: (hwnd: HWND, uMsg: Message, wParam: WPARAM, lParam: LPARAM) => LRESULT
	@rename('hInstance') var hInstance: HINSTANCE
	@rename('lpszClassName') var lpszClassName: LPCSTR
}
@rename('WPARAM') @byValue @struct declare class WPARAM {}
@rename('LPARAM') @byValue @struct declare class LPARAM {}
@rename('LRESULT') @byValue @struct declare class LRESULT {}
@rename('PWSTR') @struct declare class PWSTR {}
@rename('MSG') @struct declare class MSG {
	// TODO new () @stack alloc
}
@rename('HDC') @byValue @struct declare class HDC {}
// TODO rect @byValue extends rect @struct instead of *as!*
@rename('RECT') @byValue @struct declare class RECT {}
@rename('RECT') @struct declare class LPRECT {}
@rename('HBRUSH') @byValue @struct declare class HBRUSH {}
@rename('HMENU') @struct declare class HMENU {}
@rename('LPVOID') @struct declare class LPVOID {}
@rename('PAINTSTRUCT') @struct declare class PAINTSTRUCT {
	@rename('rcPaint') var rcPaint: RECT
	//var u: Array<WNDCLASS>
}

// TODO enum WindowStyle {
// TODO 	WS_OVERLAPPEDWINDOW
// TODO }

let ws_overlapped: UInt32 = 0x00000000
let ws_caption: UInt32 = 0x00C00000
let ws_sysmenu: UInt32 = 0x00080000
let ws_thickframe: UInt32 = 0x00040000
let ws_minimizebox: UInt32 = 0x00020000
let ws_maximizebox: UInt32 = 0x00010000
let ws_overlappedwindow: UInt32 = ws_overlapped | ws_caption | ws_sysmenu | ws_thickframe | ws_minimizebox | ws_maximizebox

let cw_usedefault = 0x80000000i32
let color_window = 5

enum Message : UInt32 {
	WM_DESTROY = 0x0002
	WM_PAINT = 0x000F
}

// Functions
@rename('DefWindowProc') declare fun defWindowProc(hwnd: HWND, uMsg: Message, wParam: WPARAM, lParam: LPARAM): LRESULT
@rename('PostQuitMessage') declare fun postQuitMessage (nExitCode: Int): Void
@rename('RegisterClass') declare fun registerClass(lpWndClass: WNDCLASS): ATOM
@rename('CreateWindowEx') declare fun createWindowEx(dwExStyle: DWORD,lpClassName:LPCSTR,lpWindowName: LPCSTR,dwStyle: DWORD,x: Int,y: Int,nWidth: Int,nHeight: Int,hWndParent: HWND,hMenu: HMENU,hInstance: HINSTANCE,lpParam: LPVOID): HWND
@rename('BeginPaint') declare fun beginPaint(hWnd: HWND, lpPaint: PAINTSTRUCT): HDC
@rename('ShowWindow') declare fun showWindow(hWnd: HWND,nCmdShow: Int): WINBOOL
@rename('FillRect') declare fun fillRect(hDC: HDC, lprc: LPRECT, hbr: HBRUSH): Int
@rename('EndPaint') declare fun endPaint(hWnd: HWND, lpPaint: PAINTSTRUCT): BOOL
@rename('GetMessage') declare fun getMessage(lpMsg: MSG,hWnd: HWND, wMsgFilterMin: UInt32,wMsgFilterMax: UInt32): WINBOOL
@rename('TranslateMessage') declare fun translateMessage(lpMsg: MSG): WINBOOL
@rename('DispatchMessage') declare fun dispatchMessage(lpMsg: MSG): LRESULT

//var u: Array<WNDCLASS> = new Array<WNDCLASS>(0)
var u: Array<WNDCLASS> = new Array<WNDCLASS>(0)
var boo/*: Array<Bool>*/ = new Array<Bool>(0)

fun wWinMain(hInstance: HINSTANCE, hPrevInstance: HINSTANCE, pCmdLine: PWSTR, nCmdShow: Int): Int
{
	console.logString("Entering wWinMain")
    // Register the window class.
    let class_name  = "Sample Window Class".wide() as! ConstArrayPointer<ClangWideChar>
	console.logString("wWinMain#1")

    let wc: WNDCLASS = malloc(sizeOf<WNDCLASS>()) as! WNDCLASS
	console.logString("wWinMain#2")
	zeroMemory(wc as! ArrayPointer<UInt8>, sizeOf<WNDCLASS>() as! UInt32)

    wc.lpfnWndProc   = windowProc
    wc.hInstance     = hInstance
    wc.lpszClassName = class_name
	console.logString("wWinMain#3")

	var a = [1,2,3]
	var a = [true, false]

	var a: Array<Bool> = new Array<Bool>(0)
	var u = new Array<WNDCLASS>(0)
	u.push(wc)
	//let wc = u.pop()
	var b = a.pop()

    registerClass(wc)
	console.logString("")
	console.logString("@")
	console.logString("%")
	console.logString("@")
	console.logString("@")
	console.logString("%")
	console.logString("%")
	console.logString("%")
	console.logString("%")
	console.logString("@")
	console.logString("@")
	console.logString("".concat("%"))
	console.logString("".concat(""))
	console.logString("Look for anything odd or out of place")
	console.logString("Я")
	console.logString("wWinMain#4")
	console.logString("wWinMain#4>>")
	String.fromInt32(123456)
	console.logString("wWinMain#4<<")
	var aa = "aaa"
	var bb = 6677
	console.logString(aa + bb)
	console.logString(aa + bb + aa)
	console.logString(bb + aa)
	console.logString(bb + aa + aa)
	console.logString(aa + aa)
	console.logString(aa + null)
	console.logString(null + aa)
	var cc = null as! String?
	console.logString(cc + aa)
	console.logString(aa + cc)
	// TODO console.logString(cc + cc) should not compile -> any binop/unop over nullable not allowd, except "" + null | null + ""

	if "".concat("%") == "".concat("%"), "".concat("%") == "%", "Look for anything odd or out of place".concat("") == "".concat("Look for anything odd or out of place").concat(""),
	"Look for anything odd or out of place".concat("hexa").bytes == "Look for anything odd or out of place".concat("hexa").bytes, String.fromInt32(123456) == String.fromInt32(123456).concat(""),
	"%" == String.fromUTF16z("%".bytes)
	 {
		console.logString("dedup works")
	}


    // Create the window.

    let hwnd: HWND = createWindowEx(
        0,                              // Optional window styles.
        class_name,                     // Window class
        "Text of unicode Español-Portugués?".concat("concat").concat("%").concat("concat").concat("").concat("concat")/*.concat(String.fromInt32(123456))*/.concat("concat").wide(),    // Window text
        //"test?".concat("concat").concat(String.fromInt32(123456)).concat("concat").concat("concat").wide(),    // Window text
        //"test?".wide(),    // Window text
        ws_overlappedwindow,            // Window style

        // Size and position
        cw_usedefault, cw_usedefault, cw_usedefault, cw_usedefault,

        null,       // Parent window
        null,       // Menu
        hInstance,  // Instance handle
        null        // Additional application data
        )
	console.logString("wWinMain#5")

    if (hwnd == null)
    {
		console.logString("wWinMain#hwnd == null")
        return 0
    }

    showWindow(hwnd, nCmdShow)
	console.logString("wWinMain#6")

    // Run the message loop.

    let msg: MSG = malloc(sizeOf<MSG>()) as! MSG
    while (getMessage(msg, null, 0, 0) > 0)
    {
        translateMessage(msg)
        dispatchMessage(msg)
    }

	console.logString("bye!")
    return 0
}

fun windowProc(hwnd: HWND, uMsg: Message, wParam: WPARAM, lParam: LPARAM): LRESULT
{
    //return defWindowProc(hwnd, uMsg, wParam, lParam)
	//console.logString("Entering windowProc")
    switch (uMsg)
    {
    case WM_DESTROY:
		console.logString("WM_DESTROY")
        postQuitMessage(0)
        return 0

    case WM_PAINT:
        {
			console.logString("WM_PAINT")
            let ps: PAINTSTRUCT = malloc(sizeOf<PAINTSTRUCT>()) as! PAINTSTRUCT
			zeroMemory(ps as! ArrayPointer<UInt8>, sizeOf<PAINTSTRUCT>() as! UInt32)
            let hdc: HDC = beginPaint(hwnd, ps)

            // All painting occurs here, between BeginPaint and EndPaint.

			// TODO not require `!` in `as` here cause safe conversion
            fillRect(hdc, ps.rcPaint as! LPRECT, (color_window+1) as! HBRUSH)

            endPaint(hwnd, ps)
			free(ps as! RuntimeAllocated)
			console.logString("WM_PAINT done")
        }
        return 0

    }
    return defWindowProc(hwnd, uMsg, wParam, lParam)
}

let sw_showdefault = 10
wWinMain(hInstance: 0x400000 as! HINSTANCE, hPrevInstance: 0x400000 as! HINSTANCE, pCmdLine: null, nCmdShow: sw_showdefault)
