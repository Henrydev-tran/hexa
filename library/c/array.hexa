// The MIT License
//
// Copyright (C) 2022 Oleg Petrenko
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// TODO decorators like `@final` etc
class Array<T> {
	// TODO do not store "capacity" - it can be always(?) calculated from length
	var length: Int = 0
	private var capacity: Int = 0
	private var data: ArrayPointer<T>

	@operator('[]')
	fun get(index: Int): T? {
		if index < 0 or index >= length {
			return null
		}

		return data[index]
	}
	@operator('[]=')
	fun set(index: Int, value: T): Void {
		if index < 0 {
			return // Invalid operation
		}

		if index >= capacity {
			let newCapacity = capacity * 2 // TODO 1.5
			let newData = malloc(sizeOfPreferPointer<T>() * newCapacity) as! ArrayPointer<T>

			for i in length {
				newData[i] = data[i]
			}

			free(data as! RuntimeAllocated)
			data = newData
			capacity = newCapacity
		}

		if index >= length {
			length = index + 1
		}

		data[index] = value
	}

	fun concat(a: [T]): [T] {return[]}
	fun join(sep: String): String {return''}
	//fun pop(): T? {}
	fun pop(): T? {return null}
	fun push(x: T): Int {return 0}
	fun reverse(): Void {}
	//fun shift(): T? {}
	fun shift(): T? {return null}
	fun slice(pos: Int, end: Int?): [T] {return[]}
	fun sort(f: (T, T)=>Int): Void {}
	fun splice(pos: Int, len: Int): [T] {return[]}
	fun toString(): String {return ''}
	fun unshift(x: T): Void {}
	fun includes(x: T): Bool {return false}
	fun indexOf(x: T, fromIndex: Int? = 0): Int {return 0}
	fun lastIndexOf(x: T, fromIndex: Int?): Int {return 0}
	fun filter(f: T=>Bool): [T] {return[]}
	fun forEach(f: (accumulator: T, currentValue: T)=>Void): Void {return}

	// TODO `@noLeave f` means `f` never transferred outside of `fun map`
	// ^ useful for detecting that `f` closure is short-living
	// TODO also means that closure may be STACK ALLOCATED
	fun map(f: T=>T): [T] {return[]}
	//new(...values: T) {} // TODO fix ... in parser
	new(size: Int) {
		length = size
		capacity = size
		//var a: T = sizeOf<T>() as! T
		data = malloc(sizeOfPreferPointer<T>() * size) as! ArrayPointer<T>
	}
	//private fun get(index: Int): T {return null}
	//private fun set(index: Int, value: T): T {return null}

	/// Do not use other than in code generator
	/// Implies that length is known from instance
	private fun from(payload: ArrayPointer<T>): [T] {
		for i in length {
			data[i] = payload[i]
		}
		return this
	}
}
