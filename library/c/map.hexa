// The MIT License
//
// Copyright (C) 2022 Oleg Petrenko
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

@final // TODO optimize into non-virtual calls
@asIs
class Map<K, V> {
	private var hasNull = false
	private var nullValue = null
	private let key: [K] = new Array<K>() // TODO []
	private let value: [V] = new Array<V>() // TODO []

	new(/*TODO ...values: T*/) {} // TODO fix ... in parser

	// TODO nullable `V?`
	fun get(k: K): V {
		if k == null {
			if this.hasNull {
				return this.nullValue
			}

			return null
		}

		return this.value[this.key.indexOf(k)]
	}

	fun has(k: K): Bool {
		if k == null {
			return this.hasNull
		}

		return this.key.includes(k)
	}

	fun set(k: K, v: V): Void {
		if k == null {
			this.hasNull = true
			this.nullValue = v
			return
		}

		let index = this.key.indexOf(k)
		if index != -1 {
			this.value[index] = v
		} else {
			this.key.push(k)
			this.value[this.key.length - 1] = v
		}
	}

	fun delete(k: K): Bool {
		if k == null {
			let had = this.hasNull
			this.hasNull = false
			this.nullValue = null
			return had
		}

		let index = this.key.indexOf(k)
		this.value[index] = null
		this.key[index] = null
		return index != -1
	}

	// fun keys(): [K] {return [null]} // TODO what with [null]?
	// TODO must be iterator, not array
	fun keys(): [K] {
		let result = this.key.filter(k => k != null)
		if this.hasNull {
			result.push(null)
		}
		return result
		// TODO
		//return this.hasNull? [...this.key.filter(k => k != null), null] : this.key.filter(k => k != null)
	}
}
