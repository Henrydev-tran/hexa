// The Hexa Compiler
// Copyright (C) 2021-2022 Oleg Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// TODO `@lowercaseTagNames` `Tag` => `Tag = 'tag'`
enum ServerCommandKind : String {
	// TODO Use `@deprecated` for obsolete commands or just explicit integers Tag = 123
	// Only syntax check
	GetWholeFileSyntaxErrors

	// This has higher priority than on-disk copy
	SyncFileContents
	DiscardFileContents

	// Search for `hexa.json` relatively to `.hexa` file
	// and return directory path to it
	FindProjectFile

	// Uses `FindProjectFile` internally
	AutocheckProject

	// IntelliSense
	CompletionItemProvider
	DocumentSymbolProvider
	HoverProvider

	// Deprecated commands here
}

declare class ServerCommand {
	// TODO `@as("k")`
	let kind: ServerCommandKind
	// TODO `@as("p")`
	let payload: Any
	// TODO
	let language: Languages
}

enum Languages : String {
	En
}

enum CompletionItemKind : Int {
	Text
	Method
	Function
	Constructor
	Field
	Variable
	Class
	Interface
	Module
	Property
	Unit
	Value
	Enum
	Keyword
	Snippet
	Color
	Reference
	File
	Folder
	EnumMember
	Constant
	Struct
	Event
	Operator
	TypeParameter
	User
	Issue
}

// TODO use it
enum CompletionItemTag : Int {
    Deprecated = 1
}

enum SymbolKind : Int {
	File = 0
	Module = 1
	Namespace = 2
	Package = 3
	Class = 4
	Method = 5
	Property = 6
	Field = 7
	Constructor = 8
	Enum = 9
	Interface = 10
	Function = 11
	Variable = 12
	Constant = 13
	String = 14
	Number = 15
	Boolean = 16
	Array = 17
	Object = 18
	Key = 19
	Null = 20
	EnumMember = 21
	Struct = 22
	Event = 23
	Operator = 24
	TypeParameter = 25
}

// TODO DocumentSymbol.tags?: readonly SymbolTag[];
enum SymbolTag : Int {
	Deprecated = 1
}

// Cache
let fileContents: [String : Buffer] = [:]
let fileOutline: [String : [{}]] = [:]

// TODO cache of file by path should always check if file exists before using (not required for remote dependencies)
// TODO cache (but not forever, recheck (invalidate all cache or if json deleted) for new files?)
fun findProjectFile(fsPath: String) {
	var lastPath = '*'
	var dir = Path.dirname(fsPath)
	var found = false

	while lastPath != dir {
		if Fs.existsSync(Path.join(dir, 'hexa.json')) {
			found = true
			break
		}

		lastPath = dir
		dir = Path.dirname(dir)
	}

	return {
		found: found,
		dir: dir
	}
}

fun syntaxCheckOnly(file: String, content: Buffer): [CompilerError] {
	try {
		let tokens = Lexer.tokenize(content, file)
		try {
			let parser = Parser.parseNodes(tokens, new Project(), true)
		} catch e: CompilerErrors {
			let errors: [CompilerError] = e.errors
			return errors
		}
	} catch e: CompilerErrors { // TODO catch () here?
		let errors: [CompilerError] = e.errors
		return errors
	}

	return []
}

fun parseOnly(file: String, content: Buffer, project: Project): [Node]? {
	try {
		let tokens = Lexer.tokenize(content, file)
		try {
			// TODO argName: lint: typechek
			return Parser.parseNodes(tokens, project, lint: true)
			// TODO handle `hexa.json defines`!!!
		} catch e: CompilerErrors {
			return null
		}
	} catch e: CompilerErrors {
		return null
	}

	return null
}

class Server {
	var port: Int

	new (port: String?) {
		this.port = port == null? 3978 : parseInt(port)
		let port = this.port
		console.log('Requested language server at localhost:' + port)

		// Initialize compiler
		Lexer.init()

		let http = require('http')
		let fs = require('fs')
		let path = require('path')
		let url = require('url')

		let project = new Project()
		let empty = '[]'

		let handleRequest = fun (project, req, res) {
			let chunks = []

			req.on('data', (chunk) => {
				chunks.push(chunk)
			})

			req.on('end', fun () {
				let data = Buffer.concat(chunks)
				let text = data.toString().trim()
				if text.length > 0 {
					let json = JSON.parse(data.toString())

					let commands: [ServerCommand] = json

					if commands.length == 0 {
						res.writeHead(404, {})
						res.write(empty)
						res.end()
					} else {
						let responseToAll: [[Any]] = []
						for command in commands {
							let response: [Any] = []
							switch command.kind {
								case GetWholeFileSyntaxErrors:
									let file = 'hexa.hexa'
									let content = Buffer.from(command.payload)

									let errors: [CompilerError] = syntaxCheckOnly(file, content)
									for error in errors {
										response.push(error)
									}

								case HoverProvider:
									let fsPath: String = Path.resolve(command.payload.fsPath)
									// TODO `let {line, character} = command.payload`
									let line: Int = command.payload.line + 1
									let character: Int = command.payload.character

									let project = findProjectFile(fsPath)
									if project.found == true {
										try {
											let main = new Main()
											main.typecheck(project.dir)
											let typecheckProject: Project = main.typecheckProject

											for mod in typecheckProject.moduleInfo {

												if mod.file != fsPath {
													continue
												}
												var nearest: Node? = null // mod.nodes[0]
												for node in mod.nodes {
													let data: NodeData? = typecheckProject.data.get(node)
													if let data = data {
														var offset = 0
														var width = 0

														switch node {
															case Class(t, _):
																width = 'class '.length + NodeType.stringify(t).length
														}

														if
															line == data.line,
															character >= data.column + offset,
															character < data.column + offset + width
														{
															nearest = node
															break
														}
													}
												}

												if let nearest = nearest {
													var code = ''
													var doc = ''

													switch nearest {
														case Class(t, _):
															let name = NodeType.stringify(t)
															code = 'class ' + name
														case Enum(t, _):
															let name = NodeType.stringify(t)
															code = 'enum ' + name
													}

													response.push({
														code: code,
														markdown: doc
														// TODO range is optional, but interesting idea
													})
												}
											}

											response.push({
												markdown: 'Hover information not available for ' + fsPath
											})

										} catch e: Any {
											// TODO then what?
											// TODO cache latest succeeded typecheck
											response.push({
												// TODO well this is internal compiler error here, not syntax one...
												markdown: 'Fix errors in code to see type hints'
											})
										}
									} else {
										// TODO then what?
										response.push({
											markdown: 'Hover information does not work with files not attached to any projects'
										})
									}

								case DocumentSymbolProvider:
									// TODO guard ?payload
									let fsPath: String = Path.resolve(command.payload.fsPath)
									let content: Buffer? = fileContents.get(fsPath)
									let project = new Project()

									if let buffer = content, let nodes = parseOnly(fsPath, content, project) {

										var lastPos = {line: 1, start: 1, end: 1}
										// TODO offset of name, so selects `class Xx` not `cl`
										fun posToRange(node: Node, length: Int) {
											let data = project.data.get(node)
											if let data = data {
												lastPos = {
													line: data.line - 1,
													start: data.column,
													end: data.column + length
												}
											}
											return lastPos
										}

										fun inferTypeFromExpr(node: Node?): String? {
											switch node {
												case null: return null
												case String(_): return 'String'
												case Array(_): return 'Array'
												case Map(_): return 'Map'
												case Int(_): return 'Int'
												case Float(_): return 'Float'
												case Bool(_): return 'Bool'
											}

											return null
										}

										// TODO nested exprs (single level of fun nesting for clarity?)
										fun fieldToSymbol(node: Node, isStatic: Bool) {
											switch node {
												case Var(name, t, expr, const):
													return {
														name: name,
														// TODO better NodeType.stringify
														// TODO print inferred const value (after successful typing)
														detail: (isStatic? 'static ' : '') + (NodeType.stringify(t) ?? inferTypeFromExpr(expr) ?? (const? 'let' : 'var')),
														kind: const? SymbolKind.Constant : SymbolKind.Variable,
														range: posToRange(node, name.length),
														children: []
													}
												case Function(name, _, _, _, external):
													let name = name ?? 'new'
													return {
														name: name,
														// TODO better stringify
														detail: external? 'declare fun' : (
															isStatic? 'static fun' : (name == 'new'? 'constructor' : 'fun')
														),
														kind: SymbolKind.Function,
														range: posToRange(node, name.length),
														children: []
													}
												case Static(field): return fieldToSymbol(node: field, isStatic: true)

												// Tag
												case NodeTypeValue(type):
													let name = NodeType.stringify(type)
													return {
														name: name,
														// TODO print inferred const value (not for Strings if name == value)
														detail: '',
														kind: SymbolKind.EnumMember,
														range: posToRange(node, name.length),
														children: []
													}

												// Tag = value
												case Binop(a, op, b):
													let name = Node.stringify(a)
													return {
														name: name,
														// TODO print inferred const value
														detail: '= ' + Node.stringify(b),
														kind: SymbolKind.EnumMember,
														range: posToRange(node, name.length),
														children: []
													}

												// Tag(args)
												case Call(e, args, argNames):
													let name = Node.stringify(e)
													return {
														name: name,
														// TODO print inferred const value
														detail: argNames.join(', '),
														kind: SymbolKind.EnumMember,
														range: posToRange(node, name.length),
														children: []
													}
											}

											// TODO require `throw ...` here for totality
											return null // {what: 'lmao?'}
										}

										// TODO `Method` instead of `SymbolKind.Function`
										// TODO enum Tags
										// TODO option to disable nested exprs outline
										fun fieldsToSymbols(fields: [Node]) {
											return fields.map(field => fieldToSymbol(field, isStatic: false)).filter(f => f != null)
										}

										for node in nodes {
											switch node {
												// TODO merge to `case Var(_) or Function(_):`
												case Var(_): response.push(fieldToSymbol(node, isStatic: false))
												case Function(_): response.push(fieldToSymbol(node, isStatic: false))

												case Class(t, extend, implement, fields, _):
													// TODO `implements`
													// TODO `extends` (with "s" on end)
													// TODO `declare`
													var detail = 'class'
													// TODO shortcut `if let extend {}` musthave
													if let extend = extend {
														detail = 'extends ' + NodeType.stringify(extend)
													}

													let name = NodeType.stringify(t)
													response.push({
														// TODO just `name,`
														name: name,
														detail: detail,
														kind: SymbolKind.Class,
														range: posToRange(node, name.length),
														children: fieldsToSymbols(fields)
													})

												case Enum(t, fields, valuesType, _):
													// TODO `extend`
													var detail = 'enum'
													// TODO shortcut `if let extend {}` musthave
													if let valuesType = valuesType {
														detail = ': ' + NodeType.stringify(valuesType)
													}

													let name = NodeType.stringify(t)
													response.push({
														// TODO just `name,`
														name: name,
														detail: detail,
														kind: SymbolKind.Enum,
														range: posToRange(node, name.length),
														children: fieldsToSymbols(fields)
													})

												// TODO more node kinds?
											}
										}

										fileOutline.set(fsPath, response)
									} else {
										// TODO then what?
										// TOOD remove `as!`
										if let cache = fileOutline.get(fsPath) as! [{}]? {
											for item in cache {
												response.push(item)
											}
										} else {
											response.push({ fail: 'notInCache', fsPath: fsPath })
										}
									}

								case SyncFileContents:
									let fsPath: String = command.payload.fsPath
									let content: String = command.payload.content

									fileContents.set(Path.resolve(fsPath), Buffer.from(content))

								case DiscardFileContents:
									let fsPath: String = command.payload.fsPath

									fileContents.delete(Path.resolve(fsPath))

								case AutocheckProject:
									let fsPath: String = command.payload.fsPath
									let project = findProjectFile(fsPath)

									if project.found == true {
										// TODO try-catch `typecheck`
										try {
										let e: CompilerErrors = new Main().typecheck(project.dir)

										let errors: [CompilerError] = e.errors
										for error in errors {
											response.push(error)
										}

										} catch e: Any {
											console.log('Compiler stopped with exception', e)
											response.push(
												new CompilerError(
													Fail.InternalError,
													'Compiler stopped with exception: ' + JSON.stringify(e.message),
													0,
													0,
													project.dir + Path.sep + "hexa.json"
												)
											)
										}
									} else {
										// Syntax check only
										let resolved = Path.resolve(fsPath)
										if let content = fileContents.get(resolved) {
											let errors: [CompilerError] = syntaxCheckOnly(resolved, content)
											for error in errors {
												response.push(error)
											}
										}
									}

								case FindProjectFile:
									let fsPath: String = command.payload

									response.push(findProjectFile(fsPath))

								case CompletionItemProvider:
									let fsPath: String = Path.resolve(command.payload.fsPath)
									let project = findProjectFile(fsPath)

									if project.found == true {
										// TODO try-catch `typecheck`
										try {
										let main = new Main()
										let e: CompilerErrors = main.typecheck(project.dir)
										let completes = []

										let errors: [CompilerError] = e.errors

										let typecheckProject: Project = main.typecheckProject

										for mod in typecheckProject.moduleInfo {

											if mod.file != fsPath {
												continue
											}

											let available = []

											for name in mod.imported.keys() {
												available.push(name)
											}

											for name in mod.exported.keys() {
												available.push(name)
											}

											// TODO sort global to lower positions
											for name in typecheckProject.globals.keys() {
												if not available.includes(name) {
													available.push(name)
												}
											}

											for name in available {
												var node = mod.exported.get(name)
												// TODO path is not relative to json?
												var imported = ''
												var file = ''

												if node == null {
													node = mod.imported.get(name)

													if node != null, let mod = typecheckProject.mapModules.get(node) {
														imported = mod.path
														file = mod.file
													}
												}

												if node == null {
													imported = '*'
													node = typecheckProject.globals.get(name)
												}

												let complete = {
													imported: imported,
													file: file,
													name: name,
													detail: name,
													kind: CompletionItemKind.Text
												}

												switch node {
													case Class(t, _):
														// TODO stringify <T>
														complete.detail = 'class ' + NodeType.stringify(t) + ' { … }'
														complete.kind = CompletionItemKind.Class
													case Enum(t, _, valuesType):
														if let valuesType = valuesType {
															complete.detail = 'enum ' + NodeType.stringify(t) + ' : ' + NodeType.stringify(valuesType) + ' { … }'
														} else {
															complete.detail = 'enum ' + NodeType.stringify(t) + ' { … }'
														}
														complete.kind = CompletionItemKind.Enum
													case Var(_, _, _, const):
														complete.detail = (const? 'let ' : 'var ') + name
														complete.kind = CompletionItemKind.Variable
													case Function(_):
														complete.detail = 'fun ' + name + '() { … }'
														complete.kind = CompletionItemKind.Function
												}

												completes.push(complete)
											}

											// TODO
											break
										}

										response.push(completes)
										} catch e: Any {

										}
									} else {
										response.push([])
									}

								case _:
									console.log('Unknown command kind', command.kind, command)
							}
							responseToAll.push(response)
						}

						res.writeHead(200, {})
						res.write(JSON.stringify(responseToAll))
						res.end()
					}
				} else {
					res.writeHead(400, {})
					res.write(empty)
					res.end()
				}
			})
		}

		let server = http.createServer((req, res) => handleRequest(project, req, res))

		server.listen(port, () => {
			// TODO handle fail
			console.log('Compiler version:', version)
			console.log('Ready to Hexa!')
		})
	}
}
