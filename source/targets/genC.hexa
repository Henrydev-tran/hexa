// The Hexa Compiler
// Copyright (C) 2021-2022 Oleg Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

	// Generates C with C++ compatibility
	class GenCxx {
		static fun spawn() {
			return new GenCxx()
		}
		new () {}
		fun perform(normalizer): String {
			project = normalizer
			return stringify()
		}

		let globalAccessor = ''
		var project: NiceProject
		var declarationsOfFunctions: [String] = []
		var declarationsOfOpaqueTypes: [String] = []
		var declarationsOfFullTypes: [String] = []
		/// Mapping of original strings (optimization)
		var declarationsOfStringsMap: [String : Int] = [:]
		var declarationsOfStrings: [String] = []
		let forwardFunctions: [String] = []
		let typedefFunctions: [String] = []
		let globalFunctions: [String] = []
		let types: [String] = []

		fun stringify() {
			// Contains forward declarations
			let header = ['// Generated by Hexa \(version) https://hexalang.github.io']
			if (project.package.addLicenseNoticeToOutput) {
				// rename addLicenseNoticeToOutput
				header.push('// Project: \(project.package.name)')
				header.push('// LICENSE \(project.package.license)')
			} else {
				header.push('// The generated code is subject to the original license')
			}

			header.push(Fs.readFileSync(__dirname + '/library/cxx/hexa.c').toString('utf8').split('\r\n').join('\n'))
			header.push('#ifdef __cplusplus')
			header.push('extern "C" {')
			header.push('#endif')
			// virtual abstract $unref();
			// virtual abstract $ref();

			// TODO copy hexa.cpp to output folder if not exists (updates??)
			// create hexa.cpp in library/cpp ^
			// ^ just copy into output file
			//header.push('#include "hexa.cpp"')

			let out: [String] = []
			let forward: [String] = []

			// Strings
			registerString('') // id == 0
			declarationsOfStringsMap.set('', 0)
			registerString('null') // id == 1
			declarationsOfStringsMap.set('null', 1)

			// Types
			// TODO use _HEX16GUID_ClassName_ instead of _mangledNameSpace_ClassName_!
			// ^ and save this String to class definition for cache in normalizer
			// cause JS will use it too for now
			for e in project.enumsSimple {
				// No need to output simple enum values
				// TODO proper base type
				forward.push('struct ' + e.name + '_;')
				if (e.staticVars.length + e.staticMethods.length == 0) {
					continue
				}
				// TODO tdef C* C
				types.push('struct ' + e.name + '_ {\n\t')

				// Static vars before static functions
				for v in e.staticVars { switch v {
					case Var(name, expr, type):
						//types.push('\n\tstatic void* ' + name + '_;')
						//types.push('\n\tstatic \(stringifyType(type)) ' + name + '_;')
						out.push('\(stringifyType(type)) ' + e.name + '_$' + name + '_;\n')
						//if (expr != null) out.push(' = ' + printExpression(expr))
					case Const(name, expr, type):
						//types.push('\n\tstatic void* ' + name + '_;')
						//types.push('\n\tstatic \(stringifyType(type)) ' + name + '_;')
						out.push('\(stringifyType(type)) ' + e.name + '_$' + name + '_;\n')
						//out.push(' = ' + printExpression(expr))
				}}

				//for (v in e.staticMethods) switch v {
				//	case Function(name, expr, args, defaults, funcType):
				//		types.push('\n\tstatic ')
				//		types.push(printFunctionReturnType(funcType))
				//		types.push(' ' + name + '_')
				//		types.push(printFunctionArguments(args, funcType, true))
				//		types.push(';')
				//}
				types.push('\n};\n')

				for v in e.staticMethods { switch v {
					case Function(name, expr, args, defaults, funcType):
						forwardFunctions.push(printFunctionReturnType(funcType))
						forwardFunctions.push(' ' + e.name + '_$' + name + '_')
						forwardFunctions.push(printFunctionArguments(args, funcType))
						forwardFunctions.push(';\n')

						out.push(printFunctionReturnType(funcType))
						out.push(' ' + e.name + '_$' + name + '_')
						out.push(printFunctionArguments(args, funcType))
						let _currentReturnType = currentReturnType
						currentReturnType = getFunctionReturnType(funcType)
						out.push(' ' + printBlock(expr) + ';\n')
						//out.push(' {};\n')
						currentReturnType = _currentReturnType
				}}
			}

			for e in project.enumsComplex {
				forward.push('struct ' + e.name + '_;')
				types.push('struct ' + e.name + '_ : Unknown_ {\n\t')
				types.push('\n\tAny_** enum_;') // Enum.Name(enum_...)
				types.push('\n\tuint16_t is_;')
				types.push('\n\tuint8_t length_;') // Amount of enum_[] to dealloc

				var i = 0
				for name in e.names {
					if (e.constructors[i] != null) {
						//types.push('\n\tstatic ' + e.name + '_* ' + name + '_(')
						////types.push([for (c in e.constructors[i]) 'Any_* ' + c + '_'].join(', '))
						//types.push([for (c in e.constructors[i].length)
						//	stringifyType(e.constructorsTypes[i][c]) + ' ' + e.constructors[i][c] + '_'
						//].join(', '))
						//types.push(');')

						out.push(e.name + '_* ' + e.name + '_$' + name + '_(')
						//out.push([for (c in e.constructors[i]) 'Any_* ' + c + '_'].join(', '))
						out.push([for c in e.constructors[i].length
							stringifyType(e.constructorsTypes[i][c]) + ' ' + e.constructors[i][c] + '_'
						].join(', '))
						out.push(') {\n')
						out.push('\tprintf("\(e.name).\(name)_()\\n");fflush(stdout);\n')
						out.push('\t' + e.name + '_* _ = (struct ' + e.name + '_*)(HEXA_NEW(sizeof(struct ' + e.name + '_)));\n')
						out.push('\t_->length_ = \(e.constructors[i].length);\n')
						out.push('\t_->enum_ = (struct Any_**)(HEXA_NEW(sizeof(struct Any_*) * \(e.constructors[i].length)));\n')
						out.push('\t_->is_ = \(i);\n')
						for c in e.constructors[i].length {
							//out.push('\t_->enum_[\(c)] = \(e.constructors[i][c])_;\n')
							out.push('\t_->enum_[\(c)] = ')
							//out.push(printTypeConverter(e.constructors[i][c] + '_', e.constructorsTypes[i][c], project.typer.typeAny))
							out.push(printToAnyConverter(e.constructors[i][c] + '_', e.constructorsTypes[i][c]))
							out.push(';\n')
						}
						out.push('\treturn _;\n')
						out.push('};\n')
					} else {
						//types.push('\n\tstatic ' + e.name + '_* ' + name + '_();')

						out.push(e.name + '_* ' + e.name + '_$' + name + '_() {\n')
						out.push('\tprintf("\(e.name).\(name)_()\\n");fflush(stdout);\n')
						out.push('\t' + e.name + '_* _ = (struct ' + e.name + '_*)(HEXA_NEW(sizeof(struct ' + e.name + '_)));\n')
						out.push('\t_->length_ = 0;\n')
						out.push('\t_->is_ = \(i);\n')
						out.push('\treturn _;\n')
						out.push('};\n')
					}
					i++
				}

				// Static vars before static functions
				// TODO is = printed?
				for v in e.staticVars { switch v {
					case Var(name, expr, type):
						//types.push('\n\tstatic void* ' + name + '_;')
						//types.push('\n\tstatic \(stringifyType(type)) ' + name + '_;')
						out.push('\(stringifyType(type)) ' + e.name + '_$' + name + '_;\n')
						//if (expr != null) out.push(' = ' + printExpression(expr))
					case Const(name, expr, type):
						//types.push('\n\tstatic void* ' + name + '_;')
						//types.push('\n\tstatic \(stringifyType(type)) ' + name + '_;')
						out.push('\(stringifyType(type)) ' + e.name + '_$' + name + '_;\n')
						//out.push(' = ' + printExpression(expr))
				}}

				for v in e.staticMethods { switch v {
						case Function(name, expr, args, defaults, funcType):
							//types.push('\n\tstatic ')
							//types.push(printFunctionReturnType(funcType))
							//types.push(' ' + name + '_')
							//types.push(printFunctionArguments(args, funcType, true))
							//types.push(';')

							forwardFunctions.push(printFunctionReturnType(funcType))
							forwardFunctions.push(' ' + e.name + '_$' + name + '_')
							forwardFunctions.push(printFunctionArguments(args, funcType))
							forwardFunctions.push(';\n')

							out.push(printFunctionReturnType(funcType))
							out.push(' ' + e.name + '_$' + name + '_')
							out.push(printFunctionArguments(args, funcType))

							let _currentReturnType = currentReturnType
							currentReturnType = getFunctionReturnType(funcType)
							//out.push(' {};\n')
							out.push(' ' + printBlock(expr) + ';\n')
							currentReturnType = _currentReturnType
					}}
				types.push('\n};\n')
			}

			for c in project.classes {
				if (c.external) {
					// TODO rename to just 'require'
					if (c.jsRequire != null) {
						// `@require('#include <...>')`
						forward.push(c.jsRequire)
					}
					// TODO rename to just 'rename'
					if let jsNative = c.jsNative, jsNative != c.name {
						forward.push('#define ' + c.name + ' ' + jsNative)
					}
					continue
				}
				//if (c.name == 'String') {
				//	continue
				//}
				if (c.name == 'Any') {
					//forward.push('#define Any_ Unknown_')
					continue
				}
				if (c.name == 'Bool') {
					continue
				}
				//if (c.useless) continue
				forward.push('struct ' + c.name + '_;')
				forward.push('struct ' + c.name + '_$vtable_;')
				//types.push('struct ' + c.name + '_ : Unknown_ {\n\t')
				types.push('struct ' + c.name + '_ {\n\t')
				let vtable = ['struct ' + c.name + '_$vtable_ {\n\t']
				// TODO const pointer to const struct
				types.push('\n\tconst struct ' + c.name + '_$vtable_ const * const $vtable_;')
				let vtableValue = ['const struct ' + c.name + '_$vtable_ const ' + c.name + '_$vtable_$ = {\n\t']
				let vtableBind = []

				for v in c.vars { switch v {
					case Var(name, expr, type):
						//if (let t = type)
						types.push('\n\t\(stringifyType(type)) ' + name + '_;')
						//else
						//types.push('\n\tAny_* ' + name + '_;')
						//if (expr != null)
						//out.push('\n\t\t\tthis.' + name + ' = ' + printExpression(expr) + '')
					case Const(name, expr, type):
						//if (let t = type)
						types.push('\n\t\(stringifyType(type)) ' + name + '_;')
						//else
						//types.push('\n\tAny_* ' + name + '_;')
						//if (expr != null) // null if property
						//out.push('\n\t\t\tthis.' + name + ' = ' + printExpression(expr) + '')
				}}

				//if (c.name == 'String') types.push('String_op')
				for v in c.methods { switch v {
					case Function(name, expr, args, defaults, funcType):
						if (name == null || name == 'new') {
							//types.push('\n\t' + c.name + '_() {};') // For placement new

							//types.push('\n\tvoid this_')
							//types.push(printFunctionArguments(args, funcType, true))
							//types.push(';')
							////types.push('\n\tstatic ' + c.name + '_* new_();')
							//forward.push('\n\tstatic ' + c.name + '_* new_')
							//forward.push(printFunctionArguments(args, funcType))
							//forward.push(';')
							forwardFunctions.push('struct ' + c.name + '_* ' + c.name + '_$new_')
							forwardFunctions.push(printFunctionArguments(args, funcType))
							forwardFunctions.push(';\n')

							// TODO cache printFunctionArguments to local var here

							// Init
							//out.push('void ' + c.name + '_::this_() {\n')
							out.push('void ' + c.name + '_$this_')
							thisArgument = 'struct ' + c.name + '_* $this'
							out.push(printFunctionArguments(args, funcType))
							thisArgument = null
							out.push(' {\n')
							// TODO cache own vtable on function enter

							//out.push('\t$this->$vtable_ = &' + c.name + '_$vtable_$;\n')

							// Init fields
							customThis = '$this'
							for v in c.vars { switch v {
								case Var(name, expr, type):
									if (expr != null) {
										out.push('\t$this->' + name + '_ = ' + printExpression(expr) + ';\n')
									}
								case Const(name, expr, type):
									out.push('\t$this->' + name + '_ = ' + printExpression(expr) + ';\n')
							}}
							pushTab()
							out.push('\t' + printBlock(expr) + ';\n')
							popTab()
							customThis = null
							out.push('};\n')

							// Alloc
							//out.push(c.name + '_* ' + c.name + '_$new_() {\n')
							out.push('struct ' + c.name + '_* ' + c.name + '_$new_')
							out.push(printFunctionArguments(args, funcType))
							out.push(' {\n')
							out.push('\tprintf("\(c.name).new_()\\n");fflush(stdout);\n')
							out.push('\tvoid** $_ = (void**)(HEXA_NEW(sizeof(struct ' + c.name + '_)));\n')
							out.push('\t$_[0] = (void *)&' + c.name + '_$vtable_$;\n')
							out.push('\tstruct ' + c.name + '_* _ = (struct ' + c.name + '_*)($_);\n')



							//out.push('\tvoid* buffer_ = (struct ' + c.name + '_*)(HEXA_NEW(sizeof(struct ' + c.name + '_)));\n')
							//out.push('\tstruct ' + c.name + '_* _ = new (buffer_) ' + c.name + '_();\n')
							//out.push('\tstruct ' + c.name + '_* _ = new (buffer_) ' + c.name + '_();\n')
							//out.push('\t_->this_();\n')
							//out.push('\t_->this_(')
							out.push('\t' + c.name + '_$this_(')
							//out.push([for (a in args) a + '_'].join(', '))
							let arg = [for a in args a + '_']
							arg.unshift('_')
							out.push(arg.join(', '))
							out.push(');\n')
							out.push('\treturn _;\n')
							out.push('};\n')
						} else {
							if false {
							types.push('\n\tvirtual ')
							types.push(printFunctionReturnType(funcType))
							types.push(' ' + name + '_')
							types.push(printFunctionArguments(args, funcType))
							types.push(';')
							}

							thisArgument = 'struct ' + c.name + '_* $this'
							vtable.push('\n\t')
							vtable.push(printFunctionReturnType(funcType))
							vtable.push(' (*const ' + name + '_) ')
							vtable.push(printFunctionArguments(args, funcType))
							vtable.push(';')

							forwardFunctions.push(printFunctionReturnType(funcType))
							forwardFunctions.push(' ' + c.name + '_$' + name + '_')
							forwardFunctions.push(printFunctionArguments(args, funcType))
							forwardFunctions.push(';\n')

							let vbind = '&' + c.name + '_$' + name + '_'
							vtableBind.push(vbind)

							out.push(printFunctionReturnType(funcType))
							out.push(' ' + c.name + '_$' + name + '_')
							out.push(printFunctionArguments(args, funcType))
							let _currentReturnType = currentReturnType
							currentReturnType = getFunctionReturnType(funcType)
							customThis = '$this'
							thisArgument = null
							// TODO cache own vtable on function enter
							out.push(' {\n\tprintf("\(c.name).\(name)()\\n");fflush(stdout);\n')
							out.push(' ' + printBlock(expr) + ';\n')
							out.push('}\n')
							customThis = null
							currentReturnType = _currentReturnType

							if false {
							out.push(printFunctionReturnType(funcType))
							out.push(' ' + c.name + '_::' + name + '_')
							out.push(printFunctionArguments(args, funcType))
							let _currentReturnType = currentReturnType
							currentReturnType = getFunctionReturnType(funcType)
							//out.push(' {};\n')
							//out.push(' ' + printBlock(expr) + ';\n')
							//thisArgument = 'this'
							//let arg = args.slice()
							let arg = [for a in args a + '_']
							arg.unshift('this')
							//console.log('slice', arg == args, arg, args)
							//out.push(' { return ' + c.name + '_$' + name + '_(' + arg.join(', ') + '); };\n')
							out.push(' { return this->$vtable_->' + name + '_(' + arg.join(', ') + '); };\n')
							//out.push(' { return ' + c.name + '_$' + name + '_' + printFunctionArguments(args) + '; };\n')
							//thisArgument = null
							}
							currentReturnType = _currentReturnType
						}
				}}

				// Static vars before static functions
				for v in c.staticVars { switch v {
					case Var(name, expr, type):
						//types.push('\n\tstatic \(stringifyType(type)) ' + name + '_;')
						out.push('\(stringifyType(type)) ' + c.name + '_$' + name + '_;\n')
						//types.push('\n\tstatic void* ' + name + '_;')
						//if (expr != null) out.push(' = ' + printExpression(expr))
					case Const(name, expr, type):
						//types.push('\n\tstatic void* ' + name + '_;')
						//types.push('\n\tstatic \(stringifyType(type)) ' + name + '_;')
						out.push('\(stringifyType(type)) ' + c.name + '_$' + name + '_;\n')
						//out.push(' = ' + printExpression(expr))
				}}

				//for (v in c.staticMethods) switch v {
				//	case Function(name, expr, args, defaults, funcType):
				//		types.push('\n\tstatic ')
				//		types.push(printFunctionReturnType(funcType))
				//		types.push(' ' + name + '_')
				//		types.push(printFunctionArguments(args, funcType))
				//		types.push(';')
				//}

				types.push('\n};\n')
				vtable.push('\n};\n')
				vtableValue.push(vtableBind.join(',\n\t'))
				vtable.push(vtableValue.join('') + '\n};\n')
				types.unshift(vtable.join(''))

				for v in c.staticMethods { switch v {
					case Function(name, expr, args, defaults, funcType):
						forwardFunctions.push(printFunctionReturnType(funcType))
						forwardFunctions.push(' ' + c.name + '_$' + name + '_')
						forwardFunctions.push(printFunctionArguments(args, funcType))
						forwardFunctions.push(';\n')

						out.push(printFunctionReturnType(funcType))
						out.push(' ' + c.name + '_$' + name + '_')
						out.push(printFunctionArguments(args, funcType))

						let _currentReturnType = currentReturnType
						currentReturnType = getFunctionReturnType(funcType)
						//out.push('\t{printf("\(c.name).\(name)()\\n");\n\t')
						//out.push('{};\n')
						out.push(' ' + printBlock(expr) + ';\n')
						//out.push('\t};\n')
						currentReturnType = _currentReturnType
						//out.push(printFunctionArguments(args, defaults) + ' => { ' + printStatement(expr) + ' }')
				}}
			}

			for g in project.globalFuncs { switch g {
				case Function(name, expr, args, defaults, funcType):
					types.push(printFunctionReturnType(funcType))
					types.push(' ' + name + '_')
					types.push(printFunctionArguments(args, funcType))
					types.push(';\n')

					out.push(printFunctionReturnType(funcType))
					out.push(' ' + name + '_')
					out.push(printFunctionArguments(args, funcType))
					//out.push(' {};\n')

					let _currentReturnType = currentReturnType
					currentReturnType = getFunctionReturnType(funcType)
					out.push(' ' + printBlock(expr) + ';\n')
					currentReturnType = _currentReturnType
					//out.push(printFunctionArguments(args, defaults) + ' ' + printBlock(expr) + ';')
			}}

			// Init
			out.push('int HEXA_MAIN(int argc, char **argv) {\n')
			out.push('\tprintf("Starting...\\n");fflush(stdout);\n')
			out.push('\t%%%HEXA_STRINGS@@@\n')
			//out.push('\tString_Strings = (String_**)HEXA_NEW(HEXA_STRINGS * sizeof(String_*));\n')
			pushTab()

			for e in project.enumsSimple {
				for v in e.staticVars { switch v {
					case Var(name, expr, type):
						if (expr != null) {
							out.push('\t' + e.name + '_$' + name + '_ = ' + printExpression(expr) + ';\n')
						}
					case Const(name, expr, type):
						if (expr != null) {
							out.push('\t' + e.name + '_$' + name + '_ = ' + printExpression(expr) + ';\n')
						}
				}}
			}

			for e in project.enumsComplex {
				for v in e.staticVars { switch v {
					case Var(name, expr, type):
						if (expr != null) {
							out.push('\t' + e.name + '_$' + name + '_ = ' + printExpression(expr) + ';\n')
						}
					case Const(name, expr, type):
						if (expr != null) {
							out.push('\t' + e.name + '_$' + name + '_ = ' + printExpression(expr) + ';\n')
						}
				}}
			}

			for e in project.classes {
				for v in e.staticVars { switch v {
					case Var(name, expr, type):
						if (expr != null) {
							out.push('\t' + e.name + '_$' + name + '_ = ' + printExpression(expr) + ';\n')
						}
					case Const(name, expr, type):
						if (expr != null) {
							out.push('\t' + e.name + '_$' + name + '_ = ' + printExpression(expr) + ';\n')
						}
				}}
			}

			for g in project.globalVars { switch g {
				// TODO maybe use "var"
				case Var(name, expr, type):
					//types.push('void* ' + name + '_;\n')
					types.push(stringifyType(type))
					types.push(' ' + name + '_;\n')
					if (expr != null) {
						out.push('\t' + name + '_ = ' + printExpression(expr) + ';\n')
					}
					//out.push('\n\tvar ' + name)
					//if (expr != null) out.push(' = ' + printExpression(expr))
					// TODO meybe not useful
					//else out.push(' = null')
				case Const(name, expr, type):
					types.push(stringifyType(type))
					types.push(' ' + name + '_;\n')
					if (expr != null) {
						out.push('\t' + name + '_ = ' + printExpression(expr) + ';\n')
					}
					//types.push('void* ' + name + '_;\n')
					//out.push('\n\tvar ' + name + ' = ' + printExpression(expr))
			}}

			if (project.init.length > 1) {
				throw 'project.init.length > 1'
			}
			let init = printStatement(project.init[0])

			// Note: strings should be gathered after ALL expressions printed
			// TODO may be [] length == 0
			let strings = ['String_Strings = (struct String_**)HEXA_NEW(HEXA_STRINGS * sizeof(struct String_*));\n']
			for id in declarationsOfStrings.length {
				// TODO set ref counting
				//strings.push('\tString_Strings[\(id)] = String_fromUTF8z("\(declarationsOfStrings[id])");\n')
				strings.push('\tString_Strings[\(id)] = String_$fromUTF16z_((const uint16_t*)L"\(declarationsOfStrings[id])");\n')
				//strings.push('\twprintf(L"\(declarationsOfStrings[id])");\n')
			}
			out.push('\t')
			out.push(init)
			popTab()
			//for (init in project.init) {
			//	// TODO custom entry
			//	// TODO globalVars
			//	out.push('\t')
			//	out.push(printStatement(init))
			//	popTab()
			//}
			out.push('\tprintf("Exiting...\\n");fflush(stdout);\n')
			out.push('\treturn 0;\n}\n')

			out.push('#ifdef __cplusplus\n')
			out.push('}\n')
			out.push('#endif\n')

			forward.push('#define HEXA_STRINGS \(declarationsOfStrings.length)')

			// TODO all those to [ ].join('\n') instead of `+`
			return (
				header.join('\n')
				+ '\n// Forward\n' +
				forward.join('\n')

				+ '\n// Typedef functions\n' +
				typedefFunctions.join('')

				+ '\n// Forward functions\n' +
				// TODO forwardStructs.join('\nstruct '), forwardTypes
				forwardFunctions.join('')

				//+ '\n\n// Strings\nString_* String_Strings[\(declarationsOfStrings.length)] = {nullptr};\n'
				+ '\n\n// Strings\nstruct String_** String_Strings;\n'
				// TODO ^ add predefined known bytes length? like sizeof
				+ '\n// Types\n' +
				types.join('')

				+ '\n// Global functions\n' +
				globalFunctions.join('')

				+ '\n// Statements\n' +
				// TODO Boi, dat weird
				out.join('').split('%%%HEXA_STRINGS@@@').join(strings.join(''))
			).split('\n').join('\r\n')










			var out = ''

			// Types
			for e in project.enumsSimple {
				// No need to output simple enum values
				//out += '\n' + 'struct _x' + e.name + ' {};'
				//out += '\n' + 'uint32_t _x' + e.name + ';'
				declarationsOfOpaqueTypes.push('typedef uint16_t _x' + e.name)
				// TODO typedef, renamed
				for v in e.staticVars { switch v {
					case Var(name, expr, type):
						out += '\n' + stringifyType(type) + ' _x' + e.name + '_' + name
						if (expr != null) {
							out += ' = ' + printExpression(expr) + ';' //!to constructor
						}
						// += ;
					case Const(name, expr, type):
						out += '\n' + stringifyType(type) + ' _x' + e.name + '_' + name
						out += ' = ' + printExpression(expr) + ';'
				}}
				for v in e.staticMethods { switch v { // TODO forward, auto args
					//case Function(name, expr, args, defaults, types, returns):
					//	out += '\n' + printType(returns) + ' _x' + e.name + '_' + name
					//	out += printFunctionArguments(args, defaults, types) + ' { ' + printStatement(expr) + ' };'
				}}
			}

			for c in project.classes {
				if (c.external) {
					if (c.jsRequire != null) {
						// todo MAKE IT possible to use plain-c include's!
						// like "declare" vs "deep extern declare" for Haxe
						out += '\n ' + '/*var ' + c.name + ' = require("' + c.jsRequire + '")*/'
						continue
					}
					//declarationsOfOpaqueTypes.push('#define _x' + c.name + ' ' + (c.jsNative ?? c.name))
					// Avoid adding of `;`
					//header.push('#define _x' + c.name + ' ' + (c.jsNative ?? c.name))
					header.push('typedef ' + (c.jsNative ?? c.name) + ' _x' + c.name + ';')
					continue
				}

				let renamed = '_x' + c.name
				let t = ['struct ', renamed, ' {'] // t should be used instead of out???
				//out += '\n ' + 'struct ' + c.name + ' {'
				// maybe use as struct* not just `struct`?
				declarationsOfOpaqueTypes.push('typedef struct \(renamed)* \(renamed)')
				t.push('\n _xclass _xclass;') // Reference counting and metatable
				for v in c.vars { switch v {
					case Var(name, expr, type):
					t.push('\n ' + stringifyType(type) + ' _x' + name + ';')
					//if (expr != null) out += ' = ' + printExpression(expr)
					//t.push(';')
					case Const(name, expr, type):
					//t.push('\n ' + printType(type) + ' = ' + printExpression(expr) + ';')
					t.push('\n ' + stringifyType(type) + ' _x' + name + ';')
				}}
				for v in c.methods { switch v {
					case Function(name, expr, args, defaults): // Class method
					let types = null
					let returns = null
					var declaration = printType(returns) + ' '
					let constructor = (name == null || name == 'new')
					if (constructor) {
						declaration = renamed + ' '
					}
					declaration += renamed + '_' + name

					if constructor {
						if (args.length > 0) {
							declaration += '(void* _x' + args.join(', void* _x') + ')'
						} else {
							declaration += '()'
						}
					} else {
						if (args.length > 0) {
							declaration += '(\(renamed) _xthis, void* _x' + args.join(', void* _x') + ')'
						} else {
							declaration += '(\(renamed) _xthis)'
						}
					}

					declarationsOfFunctions.push(declaration)
					//if (name == null || name == 'new') declaration = '\(renamed) \(renamed)_new'
					//if (name == null || name == 'new') out += '\n\(renamed)* constructor_\(renamed)'
					//else out += '\nauto ' + name
					out += '\n' + declaration
					//out += '(' + args.join(', ') + ') { '
					out += ' { '

					if constructor {
						out += '\n \(renamed) _xthis = (\(renamed))HEXA_NEW(sizeof(struct \(renamed)));'
						// Init fields
						for v in c.vars { switch v {
							case Var(name, expr, type):
							if (expr != null) {
								out += '\n _xthis->_x' + name + ' = ' + printExpression(expr) + ';'
							}
							case Const(name, expr, type):
							out += '\n _xthis->_x' + name + ' = ' + printExpression(expr) + ';'
						}}
						out += '\n '
						out += printStatement(expr) + '\n return _xthis;\n};'
					} else {
						out += printStatement(expr) + '\n};'
					}
				}}
				t.push('\n}')
				declarationsOfFullTypes.push(t.join(''))

				for v in c.staticVars { switch v {
					case Var(name, expr, type):
						out += '\n ' + stringifyType(type) + ' ' + renamed + '_' + name
						//t.push('\n ' + c.name + '.' + name)
						// TODO to main()
						//if (expr != null) out += ' = ' + printExpression(expr)
						out += ';'
						//if (expr != null) t.push(' = ' + printExpression(expr))
				}}
			}
		}

		var tabs = ''

		@inline fun pushTab() {
			tabs += '\t'
		}

		@inline fun popTab() {
			tabs = tabs.substring(0, tabs.length - 1)
		}

		// All names are prefixed with `_x`, so reserved words are not required
		var reserved = []

		// For `return value` conversions (like Bool to Any)
		var currentReturnType: Type? = null

		// Surrounds with { brackets } single statement
		// TODO rename to printAsBlock
		fun printBlock(s: Statement): String {
			//return printStatement(s)
			switch s {
				case Block(el):
					return printStatement(s)
				//if (el.length == 1) return '{ ' + printStatement(el[0]) + '; }'
				if (el.length == 1) { switch (el[0]) {
					case Block(_): return printBlock(el[0])
					case _: return '{ ' + printStatement(el[0]) + '; }'
				}}
				if (el.length == 0) {
					return '{}'
				}
				return printStatement(s)
				case _: //return '{ ' + printStatement(s) + '; }'
					return printStatement(Statement.Block([s]))
			}
		}

		var metaBlock: [String] = []
		var tempId = 0

		var last: Statement = '' as! Statement // TODO remove
		fun printStatement(s: Statement) {
			last = s ?? last // TODO should error! cause String!
			switch s {
				case Statements(els):
					var r = ''
					for s in els {
						if (s != null) {
							r += '\n' + tabs + printStatement(s) + ';'
						}
					}
					return r

				case Break: return 'break'
				case Continue: return 'continue'
				case Block(el):
					if (el.length == 0) {
						return '{}'
					}
					pushTab()

					fun printMetaBlock(e: Statement) {
						let meta = metaBlock
						metaBlock = []

						var ss = printStatement(e)
						var r = []
						for line in metaBlock {
							//r.unshift(line)
							r.push(line)
						}
						r.push(ss)

						metaBlock = meta
						return r.join(';\n' + tabs)
					}

					var r = '{'

					for e in el { switch e {
						case null:
						case Statements(els):
							for s in els {
								if (s != null) {
									r += '\n' + tabs + printMetaBlock(s) + ';'
								}
							}
						case _:
							r += '\n' + tabs + printMetaBlock(e) + ';'
					}}

					popTab()
					return r + '\n' + tabs + '}'
				//case New(e, args): return '' + printExpression(e) + '$new_' + printCallArguments(args)
				case Const(name, expr, type):
					return stringifyType(type) + ' ' + name + '_' + (expr == null? '' : ' = ' + printTypeConverter(printExpression(expr), getType(expr), type))
				case Var(name, expr, type):
					switch type {
						case ClassInstance(type, generics):
							var arraySize = ''
							if type.name == 'ArrayByValue' {
								if let count = generics[1] {
									arraySize = '[' + Type.stringify(count) + ']'
								} else {
									arraySize = '[]'
								}

								switch expr {
									case Array(el):
										let valueType = generics[0]
										return stringifyType(valueType) + ' ' + name + '_' + arraySize + ' = {' + [for a in el printTypeConverter(printExpression(a), getType(a), valueType)].join(', ') + '}'
									case null:
										throw 'Array initializer required'
								}
							}
					}

					return stringifyType(type) + ' ' + name + '_' + (expr == null? '' : ' = ' + printTypeConverter(printExpression(expr), getType(expr), type))
				//case Function(name, expr, args, defaults, types, returns):
				//	return printType(returns) + ' _x' + name + printFunctionArguments(args, defaults, types) + ' ' + printBlock(expr)
				//	//return 'const void* _x' + name + ' = ' + ((async==true)?'async ':'') + printFunctionArguments(args, defaults) + ' => ' + printBlock(expr)
				case Function(name, expr, args, defaults, funcType):
					let _currentReturnType = currentReturnType
					currentReturnType = getFunctionReturnType(funcType)

					let temp = tempId++
					let rt = printFunctionReturnType(funcType)
					forwardFunctions.push(rt)
					forwardFunctions.push(' _$\(temp)')
					forwardFunctions.push(printFunctionArguments(args, funcType, false))
					forwardFunctions.push(';\n')
//
//
//
//					rt::forwardFunctions.push
//
//					rt::forwardFunctions.push()
//
//					rt |> forwardFunctions.push |> sort
//
//					rt.(forwardFunctions.push).(sort)
//
//					...(rt, forwardFunctions.push, sort)
//
//
//					printFunctionArguments(args, funcType, true) |> globalFunctions.push()
//
//					printFunctionArguments(args, funcType, true) |> globalFunctions.push
//
//					printFunctionArguments(args, funcType, true) :: globalFunctions.push
//
//					printFunctionArguments(args, funcType, true)::globalFunctions.push
//
//

					let tab = tabs
					tabs = ''
					globalFunctions.push(rt)
					globalFunctions.push(' _$\(temp)')
					globalFunctions.push(printFunctionArguments(args, funcType, true))
					globalFunctions.push(' ')
					globalFunctions.push(printBlock(expr))
					tabs = tab

					currentReturnType = _currentReturnType
					return stringifyType(funcType) + ' \(name)_ = _$\(temp)'

					let result = 'auto \(name)_ = [&]' + printFunctionArguments(args, funcType, true)
					+ '->' + printFunctionReturnType(funcType) + ' '
					+ printBlock(expr)
					currentReturnType = _currentReturnType
					return result
				case Return(e):
					if (e == null) {
						return 'return'
					}
					//let type = getType(e)
					//if (type != currentReturnType) {
					//	if (type == project.typer.typeBool) return 'return Any_fromBool(' + printExpression(e) + ')'
					//	if (currentReturnType == project.typer.typeBool) return 'return (' + printExpression(e) + ')->_toBool()'
					//	return 'return (' + stringifyType(currentReturnType) + ')(' + printExpression(e) + ')'
					//}
					return 'return ' + printTypeConverter(printExpression(e), getType(e), currentReturnType)
				case If(econd, eif, eelse):
					var r = 'if (' + printExpression(econd) + ') ' + printBlock(eif)
					if (eelse != null) {
						r += ' else ' + printStatement(eelse)
					}
					return r
				case Call(e, args, expects, kind):
					//let type = getType(e)
					//switch type {
					//	case ClassInstance(_, _): return 'virtual'
					//	case Class(_, _): return 'static'
					//}
					switch kind {
						// TODO error on (_,_) if simple enum case CallKind.VirtualMethod(_, _): return '*.virtual'
						case VirtualMethod:
						switch e {
							case Dot(expr, name, result):
								let temp = tempId++

								metaBlock.push(stringifyType(getType(expr)) + ' _$\(temp) = ' + printExpression(expr))

								return
									//'{\n' + tabs +
									//'\t' + stringifyType(getType(expr)) + ' _$\(temp) = ' + printExpression(expr) + ';\n' + tabs +
									'_$\(temp)->$vtable_->' + name + '_' + printCallArgumentsVirtual('_$\(temp)', args, expects)// + ';\n' + tabs// +
									//'}'
						}
						//case CallKind.Static: return '*.static'
						//case CallKind.Function: return '*.function'
						//case _: return '*.???' + kind
					}
					//'/*Statement.Call*/' + Type.stringify(type)
					return printExpression(e) + printCallArguments(args, expects)
				case Try(expr, t, v, catches):
					pushTab()
					var r = '_try {\n' + tabs
					// TODO transfer &$try as function argument
					r += 'struct Any_* $try = (struct Any_*)0;' + '\n' + tabs
					r += printStatement(expr)
					popTab()
					// TODO test $try for null at each functions calls and goto $catch
					// TODO test $try for null and do ARC
					r += '\n' + tabs + '$catch: ; } _catch(' + printType(t[0]) + ' _x' + v[0] + ') {\n' + tabs + ' '
					pushTab()
					r += printStatement(catches[0])
					popTab()
					return r + '\n' + tabs + '}'
				case Assign(a, v):
					switch a {
						case Dot(expr, name):
							// Dynamic
							let type = getType(expr)
							if ((type == project.typer.typeAny) || (type == null)) {
								return  printExpression(expr) +
									'->var_(String_fromUTF8z("' + name + '"), ' + printToAnyConverter(printExpression(v), getType(v)) + ')'
							}
					}
					return printExpression(a) + ' = ' + printExpression(v)
					//return printExpression(a) + ' = ' + printTypeConverter(printExpression(v), getType(v), getType(a))
				case Throw(e):
					return '_throw(' + printExpression(e) + ')'
				case For(name, over, by):
					return 'for (struct Any_* ' + name + '_; ' + printExpression(over) + ';) ' + printStatement(by)
				case Increment(e): return printExpression(e) + '++'
				case Decrement(e): return printExpression(e) + '--'
				case While(econd, e, pre):
				// TODO ^ separate WhileDo DoWhile
					if (pre) {
						return 'while (' + printExpression(econd) + ') ' + printStatement(e)
					}
					return 'do {' + printStatement(e) /*block*/ + '} while (' + printExpression(econd) + ')'
				case Assignop(a, op, value):
					return printExpression(a) + ' ' + Token.stringify(op) + '= ' + printExpression(value)
				/*case Dot(expr, name): switch expr {
					// TODO ^ replace to Statement.Expression
					// TODO use types in future, cause renames may make expr to be lower case
					// ^ DotStaticMethodCall DotStaticMethodAsValue
					case Ident(id):
						// Static
						if (id.charAt(0) == id.charAt(0).toUpperCase()) {
							return id + '_:?:' + name + '_'
						}
					}
					return printExpression(expr) + '->' + name*/
				case Switch(expr, cases, statements):
					// Convert to if-else because C is not fun
					let value = printExpression(expr)
					let valueType = stringifyType(getType(expr))
					var r = '{ \(valueType) switch_ = ' + value + ';'

					// case 1: case 2: case 3:
					var else_ = false
					for i in cases.length { if (cases[i].length > 1) {
						if (else_) {
							r += ' else'
						}
						r += '\n' + tabs + 'if (('
						let conds = []
						for cc in cases[i] { switch cc {
							case Null:
								// TODO == nullptr for non-tagged enums
								// switch expr EnumTag
								conds.push('switch_ == -1')
							case _:
								conds.push('switch_ == ' + printExpression(cc))
						}}
						r += conds.join(') || (') +  ')) '
						pushTab()
						r += printBlock(statements[i])
						popTab()
						else_ = true
					} else if let cc = cases[i][0] {
						if (else_) {
							r += ' else'
						}
						r += '\n' + tabs + 'if ('
						switch cc {
							case Null:
								r += 'switch_ == -1) '
							case _:
								r += 'switch_ == ' + printExpression(cc) + ') '
						}
						pushTab()
						r += printBlock(statements[i])
						popTab()
						else_ = true
					}}

					// default:
					for i in cases.length { if (cases[i].length == 0) {
						if (else_) {
							r += ' else'
						}
						r += '\n' + tabs
						r += printBlock(statements[i])
					}}

					r += ';\n' + tabs
					return r + '}'

					// TODO: don't use "0" as tag, use 1+; use `switch (a? a->index : 0)` or
					// generate `if (a) switch () else null-case` in normalizer
					/*
						let temp = f()
						if temp != null {
							switch temp.index {
								// no null case
							}
						} else {
							null case
						}
						^ in normalizer
					*/
					var r = 'switch (' + printExpression(expr) + ') {'

					// case 1: case 2: case 3:
					for i in cases.length { if (cases[i].length > 0) {
						r += '\n' + tabs
						for cc in cases[i] {
							r += 'case ' + printExpression(cc) + ': '
						}
						//pushTab()
						//r += '{\n' + tabs
						//r += printStatement(statements[i])
						//popTab()
						//r += '\n' + tabs + '} break;\n' + tabs

						pushTab()
						r += printBlock(statements[i])
						popTab()
						r += ' break;'
					}}

					// default:
					for i in cases.length { if (cases[i].length == 0) {
						r += '\n' + tabs + 'default:'
						r += '\n' + tabs
						r += printBlock(statements[i])
						//r += '\n' + tabs
					}}

					r += '\n' + tabs
					return r + '}'

				case _: console.error("Unknown statement kind (GenCxx):", s)
				console.trace("Here I am!")
			}
		}

		fun printCallArguments(args: [Expression], expects: [Type]?) {
			if let exp = expects {
				return '(' + [for i in args.length
					printTypeConverter(printExpression(args[i]), getType(args[i]), exp[i])
				].join(', ') + ')'
			}

			return '(' + [for a in args printExpression(a)].join(', ') + ')'
		}

		fun printCallArgumentsVirtual(me: String, args: [Expression], expects: [Type]?) {
			if (args.length == 0) {
				return '(' + me + ')'
			}

			if let exp = expects {
				return '(' + me + ', ' + [for i in args.length
					printTypeConverter(printExpression(args[i]), getType(args[i]), exp[i])
				].join(', ') + ')'
			}

			return '(' + me + ', ' + [for a in args printExpression(a)].join(', ') + ')'
		}

		fun getFunctionReturnType(funcType: Type): Type? { switch funcType {
			case Function(args, returns): return returns
			case _: return null
		}}

		fun printFunctionReturnType(funcType: Type) { switch funcType {
			case Function(args, returns): return stringifyType(returns)
			case _: return 'void'
		}}

		fun printToAnyConverter(string: String, type: Type): String {
			if (type == project.typer.typeAny) {
				return string
			}
			if (type == project.typer.typeBool) {
				return 'Any_fromBool(' + string + ')'
			}
			if (type == project.typer.typeInt) {
				return 'Any_fromInt(' + string + ')'
			}
			return '(struct Any_*)(' + string + ')'
		}

		fun printValueToNullableConverter(string: String, fromValue: Type, to: Type): String {
			return '%printValueToNullableConverter%'
		}

		fun printNullableToValueConverter(string: String, fromValue: Type, to: Type): String {
			return '%printNullableToValueConverter%'
		}

		/// Note: this is a strict `as!` kind of conversion
		fun printTypeConverter(string: String, fromValue: Type, to: Type): String {
			if (fromValue == to) {
				return string
			}

			// Integers
			if fromValue == project.typer.typeUInt16, to == project.typer.typeInt {
				return '(int32_t/*!*/)(' + string + ')'
			}

			// TODO combine all `== project.typer.typeAny` to single `if`
			if fromValue == project.typer.typeBool, to == project.typer.typeAny {
				return 'Any_fromBool(' + string + ')'
			}
			if fromValue == project.typer.typeAny, to == project.typer.typeBool {
				return '(' + string + ')->_toBool()'
			}
			// ^ TODO ((==null)?false:_toBool)
			// != null SHOULD BE DONE ONLY FOR NULLABLE AND Any
			if fromValue == project.typer.typeAny, to == project.typer.typeInt {
				return '(' + string + ')->_toInt()'
			}
			// ^ TODO ((==null)?0:_toInt) cause 1+null+2=3

			if fromValue == project.typer.typeAny, to == project.typer.typeFloat {
				return '(' + string + ')->_toFloat()'
			}
			// ^ TODO ((==null)?0.0:_to) cause 1+null+2=3
			if fromValue == project.typer.typeInt, to == project.typer.typeString {
				return 'String_fromInt(' + string + ')'
			}
			// TODO ^ from Float, Bool, etc

			if (fromValue == project.typer.typeString) { switch to {
				case ClassInstance(type): if (type.name == 'ConstCharPointer') {
					console.log(type)
					return '(' + string + ')->bytes_'
				}
			}}

			//console.log(to) // , (to as! Any). ConstCharPointer

			if (to == project.typer.typeAny) {
				return printToAnyConverter(string, fromValue)
			}
			if (fromValue != to) {
				// TODO in future reformat into `case N(A),N(B)|A,B if (A==B):` etc complex nested combined patterns
				// TODO what if use `E.nullable` instead of `Null(E)`? meh than T1 != T2 would be broken?
				switch to {
					// `T? = _`
					case Nullable(toNull): switch fromValue {
						case Nullable(fromNull):
							// `var x: T? = T?`
							if (toNull == fromNull) {
								return string
							}
							// `var x: A? = B?` unsafe conversion
							// TODO `(Int?) as! (Float?)` should not be bit-cast (how C does `(double)(int)123`?)
							return '(/*A? = B?*/' + stringifyType(to) + ')(' + string + ')'
						case _:
							// `var x: T? = T`
							if (toNull == fromValue) {
								if (toNull == project.typer.typeInt) {
									return '((struct Null$Int32){(' + string + '), 1})'
								}
								return '%T? = T%'
							}
							// `var x: A? = B` unsafe conversion
							// TODO `(Int?) as! (Float)` should not be bit-cast (how C does `(double)(int)123`?)

							switch fromValue {
								// Essentially just `null`
								case UnknownNullable(value): if (value.value == null) {
								if (toNull == project.typer.typeInt) {
									return '((struct Null$Int32){0, 0})'
								}
								if (toNull == null) {
									return string // TODO seems like unspecified generic type <T>
								}
								return '/*%T? = null%*/(' + string + ')'
								}
							}

							//return '(/*2 from=' + stringifyType(fromValue) + '*/' + stringifyType(to) + ')(' + string + ')
							return '(/*A? = B*/' + stringifyType(to) + ')(' + string + ')'
					}
					// `T = _`
					case _: switch fromValue {
						case Nullable(fromNull):
							// `var x: T = T?`
							if (to == fromNull) {
								if (fromNull == project.typer.typeInt) {
									return string + '.value_'
								}
								return string
								return '%T = T?%'
							}
							// `var x: A = B?` unsafe conversion
							// TODO `(Int?) as! (Float)` should not be bit-cast (how C does `(double)(int)123`?)
							return '(/*A = B?*/' + stringifyType(to) + ')(' + string + ')'
						case _:
							// `var x: T = T`
							if (to == fromValue) {
								return string
							}
							// `var x: A = B` unsafe conversion

							switch fromValue {
								// Essentially just `null`, not `T?`!
								case UnknownNullable(value): if (value.value == null) {
								if (to == project.typer.typeInt) {
									return '(int32_t)0'
								}
								//'((Null$Int32)(' + string + ')).value_'
								if (to == null) {
									return string // TODO seems like unspecified generic type <T>
								}
								return '(/*T = null*/' + stringifyType(to) + ')(' + string + ')'
								return '%T = null%'
								}
							}

							let tot = JSON.stringify(''+to)
							if (to == null) {
								return string
							}

							var fromStructByValue = false
							switch fromValue {
								case ClassInstance(type):
									let atts = project.mapDecorators.get(type.parent)
									fromStructByValue = Normalizer.getDec(atts, 'byValue') != null
							}
							var toStructByPointer = false
							switch to {
								case ClassInstance(type):
									let atts = project.mapDecorators.get(type.parent)
									toStructByPointer = Normalizer.getDec(atts, 'struct') != null
							}

							if fromStructByValue and toStructByPointer {
								return '(/*struct to pointer*/' + stringifyType(to) + ')&(' + string + ')'
							}

							return '(' + stringifyType(to) + ')(' + string + ')'
							return '(/*A = B*/' + '/*\(tot)*/' + stringifyType(to) + ')(' + string + ')'
					}
				}
			}
			return string + '/*TO*/'
			// TODO ANYTHING to string should be checked =null always
		}

		var thisArgument: String? = null
		fun printFunctionArguments(args: [String], funcType: Type, defaults: Bool = false) {
			if args.length == 0, thisArgument != null {
				return '(' + thisArgument + ')'
			}
			if (args.length == 0) {
				return '(void)' // Otherwise C function takes infinite number of arguments
			}
			switch funcType {
				case Function(types, _):
					let results: [String] = []
					if let thisArgument = thisArgument {
						results.push(thisArgument)
					}

					for a in args.length {
						var result = stringifyType(types[a]) + ' ' + args[a] + '_'
						if (defaults) { switch types[a] {
							case Nullable(_): result += ' = ((struct Unknown_ *)0)'
							case UnknownNullable(_): result += ' = ((struct Unknown_ *)0)'
						}}
						results.push(result)
					}
					return '(' + results.join(', ') + ')'

					// TODO Incompatible types `String` and value of `Array<String?>`
					//var thisArgument: String? = null
					//let results: String = (thisArgument != null)? [thisArgument] : []
					// lol result [String] no String

					return '(' + [for a in args.length {
						var result = stringifyType(types[a]) + ' ' + args[a] + '_'
						if (defaults) { switch types[a] {
							case Nullable(_): result += ' = ((struct Unknown_ *)0)'
							case UnknownNullable(_): result += ' = ((struct Unknown_ *)0)'
						}}
						result
					}].join(', ') + ')'

			}
			return '(' + [for a in args.length
				'struct Any_* ' + args[a] + '_'
			].join(', ') + ')'
			// TODO defaults
			// 'void* ' + args[a] + ((defaults != null && defaults[a] != null)? ' = ' + printExpression(defaults[a]) : '')
		}

		fun stringType(t: NodeType, prefix: String) {
			//let prefix = prefix? '' : ''
			if (t == null) {
				return 'void*'
			}
			//if (t == null) return prefix + 'void*'
			switch t {
				case ParametricType(name, params):
			//		if (name == 'Buffer') return prefix + name
			//		return prefix + name + '<' + [for (param in params) stringType(param, false)].join(', ') + '>'
					return '_x' + name
				case Type(name):
			//		if (name == 'Any') return prefix + 'void*'
					return '_x' + name
				case Object(_):
			//		return prefix + '{}'
				case Optional(t):
			//		return prefix + 'Null<' + stringType(t, false) + '>'
					return stringType(t, '')
			}

			return prefix + 'void*'
		}

		fun printType(t: NodeType) {
			let type = stringType(t, '')
			return type
		}

		fun stringifyType(t: Type) {
			switch t {
				case Generic(index, name): return 'void*' + '/*TODO Generic<\(name)>*/'
				case Nullable(t):
					let name = stringifyType(t)
					if (name == 'int32_t') {
						return 'struct Null$Int32'
					}
					if (name == 'double') {
						return 'struct Null$Float64'
					}
					return name
				case UnknownNullable(handle): return stringifyType(handle.value)
				case ClassInstance(type, generics):
					// TODO generic params < T > !!!!! just output into C++  templates
					// TODO type == typer.typeX
					if (type.name == 'Int') {
						return 'int32_t'
					}
					if (type.name == 'Int8') {
						return 'int8_t'
					}
					if (type.name == 'Int16') {
						return 'int16_t'
					}
					if (type.name == 'Int32') {
						return 'int32_t'
					}
					if (type.name == 'Int64') {
						return 'int64_t'
					}
					if (type.name == 'UInt8') {
						return 'uint8_t'
					}
					if (type.name == 'UInt16') {
						return 'uint16_t'
					}
					if (type.name == 'UInt32') {
						return 'uint32_t'
					}
					if (type.name == 'UInt64') {
						return 'uint64_t'
					}
					if let generic = generics, type.name == 'ConstArrayPointer' {
						return 'const ' + stringifyType(generic[0]) + '*'
					}
					if let generic = generics, type.name == 'ArrayPointer' {
						return stringifyType(generic[0]) + '*'
					}
					if let generic = generics, type.name == 'ArrayByValue' {
						//if let count = generic[1] {
						//	return stringifyType(generic[0]) + '[' + Type.stringify(count) + ']'
						//}
						//return stringifyType(generic[0]) + '[]'
						return stringifyType(generic[0])
					}
					// Keeps three states: 1 = true, 0 = false, 2 = null
					if (type.name == 'Bool') {
						return 'uint8_t'
					}

					// WinDef.h `typedef int BOOL;`
					// TODO should be just simple `enum Bool32 : Int32 { True False }`
					// TODO error if `Enum.V == xx` if Enum != simple enum (i.e. creates new instance so always false)
					// TODO allow short syntax `x == True` & `x != True` if enum's simple type is known
					if (type.name == 'Bool32') {
						return 'int32_t'
					}

					// WinDef.h `typedef BYTE BOOLEAN; typedef unsigned char BYTE;`
					// TODO UBool8?
					if (type.name == 'Bool8') {
						return 'uint8_t'
					}

					// TODO apparently should be just `@rename('void')`
					if (type.name == 'Void') {
						return 'void'
					}
					if (type.name == 'Float') {
						return 'double'
					}

					//if (let jsNative = type.jsNative) return jsNative

					let atts = project.mapDecorators.get(type.parent)

					let struct = Normalizer.getDec(atts, 'struct') != null
					let byValue = Normalizer.getDec(atts, 'byValue') != null

					if byValue and not struct {
						throw 'Must be @struct to be @byValue'
					}

					let native = Normalizer.getDec(atts, 'rename')
					if let native = native { switch (native.values[0]) {
						case String(s):
							if struct and byValue {
								return s + '/*byValue*/'
							}
							if struct {
								return s + '/*isStruct*/*'
							}
							return s
					}}

					return '/*ClassInstance*/struct ' + type.name + '_*'
				case Class(type): return 'struct/*Class*/ ' + type.name + '_*'
				// TODO ^ probably requires rename basic types too?
				case Enum(type):
					if let sub = type.fieldsTypeSimple {
						return stringifyType(sub)
					}
					return 'struct ' + type.name + '_*'
				case EnumInstance(type): return 'struct ' + type.name + '_*'
				case Struct(_): return 'struct Any_*/*Struct*/'
				case Function(args, returns):
					let temp = tempId++
					typedefFunctions.push('typedef ')
					typedefFunctions.push(stringifyType(returns))
					typedefFunctions.push(' (*_$\(temp))(')

					let a: [String] = []
					for arg in args {
						a.push(stringifyType(arg))
					}

					typedefFunctions.push(a.join(', '))
					typedefFunctions.push(');\n')
					return '_$\(temp)'
					//return 'struct Any_* /*Function* /'
				case null: return 'struct Any_*/*null?*/'
				case _: throw 'stringifyType ' + t
			}
		}

		// TODO move to Expression static fun
		fun getType(e: Expression): Type { switch e {
			case Int(_): return project.typer.typeInt
			case MetaInt(_, kind):
				switch kind {
					case Int8: return project.typer.typeInt8
					case Int16: return project.typer.typeInt16
					case Int32: return project.typer.typeInt32
					case Int64: return project.typer.typeInt64

					case UInt8: return project.typer.typeUInt8
					case UInt16: return project.typer.typeUInt16
					case UInt32: return project.typer.typeUInt32
					case UInt64: return project.typer.typeUInt64
				}

			case Float(_): return project.typer.typeFloat
			case String(_): return project.typer.typeString
			case True: return project.typer.typeBool
			case False: return project.typer.typeBool
			case Ident(_, type): return type
			case Parenthesis(expr): return getType(expr)
			case Call(_, _, type): return type
			//case If(_): return project.typer.typeAny
			case Binop(_, _, _, type): return type
			case Dot(_, _, type): return type
			case This(type): return type
			case Null: return Type.UnknownNullable({value: null})
			case UnsafeBitCast(_, to): return to
			case Index(_, _, result): return result
			case _:
			return project.typer.typeAny
			//throw 'getType ' + e
		}}

		fun registerString(string: String): Int {
			declarationsOfStrings.push(string)
			return declarationsOfStrings.length - 1
		}

		var customThis: String? = null
		fun printExpression(e: Expression) {
			switch e {
				case This: return customThis ?? 'this'
				case Ident(name):
					if (project.native.get(e) == true) {
						return name
					}
					return '' + name + '_'
				//case Null: return '((struct Unknown_ *)0)'
				case SizeOf(what):
					fun omitPointer(type: String): String {
						if type.endsWith('*') {
							return type.substr(0, type.length - 1) + ' '
						}

						return type
					}
					return 'sizeof(' + omitPointer(stringifyType(what)) + ')'
					//return 'sizeof(' + stringifyType(what) + ')'
				case Null:
					// TODO infer actual type of null in typer,
					// to print type conversion `((T*)0)`
					return 'nullptr'
					return '((struct Unknown_ *)0)'
					/*
					void f(int*) { /*...*/ }
					void f(double*) { /*...*/ }
					void g()
					{
					    f(nullptr); // compilation error, ambiguous call!
					    f(static_cast<int*>(nullptr)); // now compiler knows...
					}
					*/
				case Int(v): return '(int32_t)' + v
				case MetaInt(v, meta, type): {
					switch meta {
						case Int32: return '(int32_t)' + v
						case Int64: return '(int64_t)' + v
						case Int16: return '(int16_t)' + v
						case Int8: return '(int8_t)' + v

						case UInt32: return '(uint32_t)' + v
						case UInt64: return '(uint64_t)' + v
						case UInt16: return '(uint16_t)' + v
						case UInt8: return '(uint8_t)' + v
					}

					// TODO more kinds
				}
				case Float(v):
					let v = '' + v
					if (v.indexOf('.') == -1) {
						return '(double)' + v + '.0'
					}
					return '(double)' + v
				case String(string):
					if let id = declarationsOfStringsMap.get(string) {
						return 'String_Strings[\(id)]'
						+ `/*has:` + string.split('*').join('#') + `*/`
					}

					let s = string.split('')
					let charsOut = []
					while s.length > 0 {
						switch s[0] {
							case "'":
							charsOut.push("\\'")
							s.shift()
							case '"':
							charsOut.push('\\"')
							s.shift()
							case "\n":
							charsOut.push("\\n")
							s.shift()
							case "\r":
							charsOut.push("\\r")
							s.shift()
							case "\\":
							s.shift()
							if (s[0] == "'") {
								charsOut.push("\\'")
								s.shift()
							} else if (s[0] == '"') {
								charsOut.push('\\"')
								s.shift()
							} else if (s[0] == '\\') {
								charsOut.push("\\\\")
								s.shift()
							} else {
								charsOut.push('\\')
							}
							case _:
							charsOut.push(s[0])
							s.shift()
						}
					}

					let id = registerString(charsOut.join(""))
					declarationsOfStringsMap.set(string, id)
					return 'String_Strings[\(id)]'
						+ `/*new:` + string.split('*').join('#') + `*/`
					//return 'String_fromUTF8z("' + charsOut.join('') + '")'
				case True: return '(uint8_t)1'
				case False: return '(uint8_t)0'
				case Dot(expr, name): switch expr {
					case This: return (customThis ?? 'this') + '->' + name + '_'
					case Ident(id, typed):
						// Static
						if (id.charAt(0) == id.charAt(0).toUpperCase()) {
							return id + '_$' + name + '_'
						}
						// Dynamic
						let type = getType(expr)
						if ((type == project.typer.typeAny) || (type == null)) {
							return printExpression(expr) + '->let_(String_fromUTF8z("' + name + '"))'
						}

						switch typed {
							case ClassInstance(c):
								//console.log( 'Reaaaaaanme ' + c.name + '.' + name)
								//if let rename = c.fieldRenames[c.fieldNames.indexOf(name)] {
								if c.fieldRenames.includes(name) {
									return printExpression(expr) + '->' + name
								}
						}

						return printExpression(expr) + '->' + name + '_'
					case _:
						return printExpression(expr) + '->' + name + '_'
				}

				// TODO to keep local var caches, use something like block.push()
				// into current scope
				case Call(e, args, type, kind):
					switch kind {
						case Static:
							return printExpression(e) + '/*static*/' + printCallArguments(args)
						case VirtualMethod:
						switch e {
							case Dot(expr, name, result):
							let temp = tempId++
							let temp1 = tempId++
							let mb = metaBlock
							metaBlock = []
							let meta = stringifyType(getType(expr)) + ' _$\(temp) = ' + printExpression(expr)

							let result = '_$\(temp)->$vtable_->' + name + '_' + printCallArgumentsVirtual('_$\(temp)', args)

							for b in metaBlock {
								mb.push('/*b*/' + b)
							}
							mb.push('/*meta*/' + meta)
							//mb.push('/*result*/auto _$\(temp1) = ' + result)
							metaBlock = mb
							//return '_$\(temp1)'//result
							return result

							//return // + ';\n' + tabs// +
							//return printExpression(expr) + '/*virtual*/' + printCallArguments(args)
						}
					}

					switch e {
						// TODO better way
						case SizeOf: return printExpression(e)
					}
					return printExpression(e) + printCallArguments(args)
				case Function(name, expr, args, defaults, funcType):
					let _currentReturnType = currentReturnType
					currentReturnType = getFunctionReturnType(funcType)
					let result = '[&]' + printFunctionArguments(args, funcType, true)
					+ '->' + printFunctionReturnType(funcType) + ' '
					+ printBlock(expr)
					currentReturnType = _currentReturnType
					return result
					//if (name == null)
					//	return printType(returns) + ' __function' + printFunctionArguments(args, defaults, types) + ' ' + printBlock(expr)
					//return '((() => { void* _x' + name + ' = ' + printFunctionArguments(args, defaults, types) + ' => '
					//+ printBlock(expr) + ';return _x' + name + ';})())'
				//case Arrow(expr, args, defaults, types, returns):
				//	return printType(returns) + ' __arrow' + printFunctionArguments(args, defaults, types) + ' { return (' + printExpression(expr) + '); }'
				case New(e, args): return '/*'+e+'*/'+'' + printExpression(e) + '$new_' + printCallArguments(args)
				case Array(el):
					if (el.length == 0) {
						return 'Array_$new_(0)'
					}
					return 'Array_from(' + [for a in el printExpression(a)].join(', ') + ')'
				case Unop(op, postfix, e):
					if (postfix) {
						return printExpression(e) + Token.stringify(op)
					}
					return Token.stringify(op) + printExpression(e)
				case Elvis(nullable, othewise):
					return '((' + printExpression(nullable) + ')||(' + printExpression(othewise) + '))'
				case Parenthesis(e): return '(' + printExpression(e) + ')'
				case Binop(a, op, b):
					if (op == Token.OpAdd) {
						if (getType(a) == project.typer.typeString) {
							return 'String_opAdd(' + printExpression(a) + ', ' + printTypeConverter(printExpression(b), getType(b), project.typer.typeString) + ')'
						}
						if (getType(b) == project.typer.typeString) {
							return 'String_opAdd(' + printTypeConverter(printExpression(a), getType(a), project.typer.typeString) + ', ' + printExpression(b) + ')'
						}
					}
					let token = op == Token.OpIntDiv? '/' : Token.stringify(op)
					return printExpression(a) + ' ' + token + ' ' + printExpression(b)
				case Index(expr, index):
					switch (getType(expr)) {
						case ClassInstance(type, generic):
							if (type.name != 'Array') {
								return printExpression(expr) + '[' + printTypeConverter(printExpression(index), getType(index), project.typer.typeInt) + ']'
							}
					}
					return printExpression(expr) + '->get_(' + printTypeConverter(printExpression(index), getType(index), project.typer.typeInt) + ')'
				case If(econd, eif, eelse):
					var r = ''
					try {
						r += '(' + printExpression(econd) + ')?'
						r += '(' + printExpression(eif) + ')'
						r += ':' + printExpression(eelse)
						return r
					} catch error: Any {
						console.log('If =>', e, error)
						return r + '<!--If => error-->'
					}
				case EnumTag(expr):
					let e = printExpression(expr)
					return '(' + e + ' == ((Unknown_ *)0)? -1 : ' + e + '->is_)'
				case Object(names, el):
					return 'Object_from(' + [for i in el.length {
						((names[i]) + ', ' + printExpression(el[i]))
					}].join(', ') + ')'
				case Map(keys, values):
					if (keys.length == 0) {
						return 'Map_$new_()'
					}
					return 'Map_from(' +
					[for i in keys.length '' + printExpression(keys[i]) + ', ' + printExpression(values[i]) + ''].join(', ')
					+ ')'
				case Assignop(a, op, value):
					return printExpression(a) + ' ' + Token.stringify(op) + '= ' + printExpression(value)
				case NativeOperator(kind, args, s): switch kind {
					case Infix: return '((' + printExpression(args[0]) + ')' + s + '(' + printExpression(args[1]) + '))'
					case Function: return s + printCallArguments(args)
					case Prefix: return '(' + s + '(' + printExpression(args[0]) + '))'
					case Postfix: return '((' + printExpression(args[1]) + ')' + s + ')'
				}
				case UnsafeBitCast(e, to):
					//switch e {
					//	case Null: return '(/*UnsafeBitCast*/(struct Unknown_ *)0)'
					//	// TODO maybe use `0` value? or static_cast?
					//}
					return printTypeConverter(printExpression(e), getType(e), to)
					//return 'reinterpret_cast<' + stringifyType(to) + '>(' + printExpression(e) + '))'
					//return '(*reinterpret_cast<' + stringifyType(to) + ' *>(&' + printExpression(e) + '))'
				case Enum(typeName, tagName, tag, args):
					return '' + typeName + '_$' + tagName + '_(' + [for a in args printExpression(a)].join(', ') + ')'
				case EnumParameter(expr, index):
					return printExpression(expr) + '->enum_[' + index + ']'
				case _: console.error("Unknown expression kind:", e) return '<!--' + ((e as! Any)??[])[0] + '-->'
			}
		}
	}
