// The Hexa Compiler
// Copyright (C) 2022 Oleg Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

var asC: Bool = true

// TODO Simple enums may be only of types `Int` and `String`
enum NasmConvention : Int {
	/// Custom ABI
	// TODO transfer TLS allocator context if possible in register (and exception handler too)
	HexaCall
	FastCall
}

// TODO rename to NativeFunction/etc
class NasmFunction {
	var convention: NasmConvention = NasmConvention.FastCall
	// TODO var stackStorage: UInt32 = 0
	var stackStorage: Int = 0
	var shadowSpace = true // + 32 bytes of shadow space
	// TODO ^ false by default
	var name: String
	let body: [String] = []
	var args: [String] = [] // TODO `let` late init
	var argTypes: [Type]
	var returns: Type
	var thisType: String?
	var varStorage: [String : String] = [:]
	var labels = 0
	let storages: [String] = []
	let storageSizes: [String : Int] = [:]
	let storagesBySizes: [Int : [String]] = [:]
	var method: Bool = false

	new () {
		storageSizes.set('RAX', 8)
		// TODO more
	}

	fun fillInputs() {
		let regs = ['RCX', 'RDX', 'R8', 'R9']
		// TODO de allocate argument registers at points where they are not needed anymore

		if method {
			let storage = regs.shift()
			varStorage.set('this', storage)
		}

		// TODO float & stack & va args
		for arg in args {
			let storage = regs.shift()

			if storage == null {
				// TODO throw
			}

			varStorage.set(arg, storage)
		}
	}

	fun allocateVar(name: String, bytes: Int, type: String): String {
		if asC {
			varStorage.set(name, name + '_')
			// TODO bug
			return type + name + '_'
			//return typeToString(type) + name + '_'
		}

		stackStorage += bytes

		var kind = 'dword'
		if bytes == 8 {
			kind = 'qword'
			// TODO others
		}

		let storage = kind + ` [RBP - ` + stackStorage + `]`
		varStorage.set(name, storage)
		return storage
	}

	fun getVar(name: String): String {
		return varStorage.get(name)
	}

	fun freeVar() {
		// TODO
	}

	fun freeArgument() {
		// TODO reuse of unused (anymore) argument registers

	}

	var uid = 0
	fun allocateTempVar(): String {
		return '$' + uid++
	}

	// TODO allocations must be aligned?
	// TODO allocate grouped by size to avoid too large stack (ie 8;16;8 to 16;8;8)
	fun allocate(bytes: Int): String {
		if let storages = storagesBySizes.get(bytes) {
			if let storage = storages[storages.length - 1] {
				storages.pop()
				return storage
			}
		}

		stackStorage += bytes

		var kind = 'dword'
		if bytes == 8 {
			kind = 'qword'
			// TODO others
		}

		let storage = kind + ` [RBP - ` + stackStorage + `]`
		storageSizes.set(storage, bytes)
		return storage

	}

	fun free(storage: String): Void {
		// TODO error if freed twice
		let bytes = storageSizes.get(storage)
		let storages = storagesBySizes.get(bytes) ?? []
		storagesBySizes.set(bytes, storages) // TODO lazy

		if storages.includes(storage) {
			throw 'Storage freed twice `\(name)`.`\(storage)'
		}

		storages.push(storage)
	}

	fun finalize(): Void {
		// TODO sub only if shadow+stack > 0
		if not asC {
			if shadowSpace {
				body.unshift('sub RSP, \(stackStorage + 32); With 32 bytes of shadow space')
				// TODO align to 16 bytes by +8
			} else if stackStorage != 0 {
				body.unshift('sub RSP, \(stackStorage)')
			}
			body.unshift('push RBP; Set stack frame') // Note: `unshift` works in reverse order
			// TODO add ret only if not done
		}

		// Avoid unnecessary `jmp`
		if body[body.length - 1] == 'jmp .return' {
			body.pop()
		}

		if not asC {
			body.push('.return:')
			body.push('mov RSP, RBP; Remove the stack frame')
			body.push('pop RBP')
			body.push('ret')
		}
	}
}

// Generates NASM assembly
class GenNasm {
	static fun spawn() {
		return new GenNasm(false)
	}

	static fun spawnAsC() {
		return new GenNasm(true)
	}

	var project: NiceProject
	let reserved = []
	let hexaMain: [String] = []
	var labelUid = 0
	let extension = '.?'
	let nativeEnums = false
	var toIterator = false
	let functions: [NasmFunction] = []
	let functionStack: [NasmFunction] = []
	var functionNow: NasmFunction = null // TODO should error cause `null`
	var stringId: Int = 0
	let dataSection: [String] = []
	let typeSection: [String] = []
	let bssSection: [String] = []
	let strings: [String : Int] = [:]
	let globalAccessor = ''

	new (modeC: Bool) {
		asC = modeC
	}

	fun perform(normalizer): String {
		project = normalizer
		return stringify()
	}

	fun pushFunction(name: String): NasmFunction {
		let func = new NasmFunction()
		func.name = name
		functions.push(func)
		functionNow = func
		functionStack.push(func)
		return func
	}

	fun popFunction(): NasmFunction {
		functionStack.pop()
		let func = functionStack[functionStack.length - 1] // TODO `.last`
		functionNow = func
		return func // TODO this is nullable, guard with exception on `null ?? throw`
	}

	fun stringify() {
		let comment = asC ? '//' : ';'

		// Contains forward declarations
		let header = ['\(comment) Generated by Hexa \(version) https://hexalang.github.io']
		if project.package.addLicenseNoticeToOutput {
			// rename addLicenseNoticeToOutput
			header.push('\(comment) Project: \(project.package.name)')
			header.push('\(comment) LICENSE \(project.package.license)')
		} else {
			header.push('\(comment) The generated code is subject to the original license')
		}

		//header.push(Fs.readFileSync(__dirname + '/library/native/hexa.asm').toString('utf8').split('\r\n').join('\n'))
		if asC {
			header.push('#include <stdint.h>')
			header.push('#include <stdarg.h>')
			header.push('#include <wchar.h>')
			//header.push('#include <windows.h>')
			header.push('#ifdef __cplusplus')
			header.push('extern "C" {')
			header.push('#else')
			header.push('#define nullptr 0')
			header.push('#endif')

			header.push('#define HX_UNREACHABLE uint64_t $written; WriteFile($StdHandle, "UNREACHABLE", 11, &$written, NULL); FlushFileBuffers($StdHandle); ExitProcess(0xBADC0DE);')
		} else {
			header.push('bits 64')
			header.push('default rel')
			// TODO base?
		}

		// Init
		let forwardStructs: [String] = []
		let virtualTables: [String] = []
		let virtualPayload: [String] = []
		let forwardFun: [String] = []
		let textSection: [String] = []
		let mainText: [String] = []
		let exports: [String] = asC? [

		] : [
			'hexaEntry; Entry'
		] // TODO possibility to rename entry point
		let imports: [String] = asC? [
			'void __stdcall ExitProcess(uint32_t uExitCode);',
			'void* HeapAlloc(void* hHeap, uint32_t dwFlags, size_t dwBytes);',
			// TODO DWORD is 32-bit?
			'void* __stdcall GetStdHandle(uint32_t nStdHandle);',
			'int32_t __stdcall WriteFile(void* hFile, const char* lpBuffer, uint32_t nNumberOfBytesToWrite, void* lpNumberOfBytesWritten, void* lpOverlapped);',
			'int32_t __stdcall FlushFileBuffers(void* hFile);',
			'void* GetProcessHeap();'
		] : [
			'ExitProcess',
			'LocalAlloc'
		] // TODO
		//out.push('global HEXA_MAIN\nHEXA_MAIN:\n')
		//out.push('\tprintf("Starting...\\n");fflush(0);\n')
		//out.push('\t%%%HEXA_STRINGS@@@\n')
		//out.push('\tprintf("Exiting...\\n");fflush(0);\n')

		let hexaMain = new NasmFunction()
		hexaMain.name = 'hexaMain'
		hexaMain.returns = project.typer.typeVoid
		//let functions = [hexaMain]
		functions.push(hexaMain)
		functionNow = hexaMain
		functionStack.push(hexaMain)
		hexaMain.fillInputs()

		// Generate
		fun varTypeInit(type: Type): String {
			switch type {
				case ClassInstance(type, generic):
					// TODO 32-bit
					switch type.name {
						// TODO detect not by names
						case 'UInt8': return 'db 0; ' + type.name
						case 'UInt16': return 'dw 0; ' + type.name
						case 'UInt32': return 'dd 0; ' + type.name
						case 'UInt64': return 'dq 0; ' + type.name

						case 'Int8': return 'db 0; ' + type.name
						case 'Int16': return 'dw 0; ' + type.name
						case 'Int32': return 'dd 0; ' + type.name
						case 'Int64': return 'dq 0; ' + type.name
						// TODO saving of un-signed values as 0x
					}
					return 'dq 0; ' + type.name
			}
			return 'dq 0; ' + type // TODO proper type.enum.tagName
		}

		fun fillGlobalVar(fullName: String, expr: Expression?, type: Type) {
			// TODO let bytes = typeToSize(type)
			// TODO init known values non-dynamically (in db)
			if let expr = expr {
				functionNow = hexaMain
				let valueStorage = expression(expr)
				if asC {
					functionNow.body.push('' + fullName + ' = ' + valueStorage + '; // global.var')
				} else {
					// TODO compact `mov` for ints/etc
					let kind = 'qword' // TODO
					functionNow.body.push('mov \(kind) [REL ' + fullName + '], ' + valueStorage + '; global.var')
				}
			}
		}

		for c in project.classes {
			if c.useless {
				continue
			}

			if c.external {
				continue
			}

			forwardStructs.push(c.name)

			virtualTables.push('struct \(c.name)$$ {')
			var tableDelimiter = '\n\t'
			virtualPayload.push('static const struct \(c.name)$$ const \(c.name)$_ = {\n\t')
			var virtualDelimiter = ''
			// TODO deallocationCallback is NOT virtual method to not break COM interfaces
			// ^ static taking `@weak @noLeave self This` first argument and return `Void`
			// ^ `This` means `class C<T>` a `C<T>` itself

			for v in c.methods {
				switch v {
					case Function(name, expr, args, defaults, funcType):
						switch funcType {
							case Function(argTypes, returns):
								let ref = c.name + '$' + name
								let func = pushFunction(ref)
								func.args = args
								func.argTypes = argTypes
								func.returns = returns
								func.method = true // Constructor takes `this` as method, cause allocated externally
								func.thisType = 'struct \(c.name)_* '
								// TODO defaults
								func.fillInputs()

								if asC and name != 'new' {

									virtualTables.push(tableDelimiter)
									//tableDelimiter = ';\n\t'
									virtualTables.push(typeToString(returns) + '(*const \(name)_) (struct \(c.name)_* this_')

									forwardFun.push('\n')
									forwardFun.push('static ' + typeToString(returns) + '\(c.name)$\(name)(struct \(c.name)_* this_')

									if args.length > 0 {
										virtualTables.push(', ')
										virtualTables.push(args.map((arg, i) => typeToString(argTypes[i]) + arg + '_').join(', '))

										forwardFun.push(', ')
										forwardFun.push(args.map((arg, i) => typeToString(argTypes[i]) + arg + '_').join(', '))
									}

									virtualTables.push(');')

									virtualPayload.push(virtualDelimiter)
									virtualDelimiter = ',\n\t'
									virtualPayload.push('&\(c.name)$\(name)')

									forwardFun.push(');')
								}

								if asC and name == 'new' {
									forwardFun.push('\n')
									forwardFun.push('static void \(c.name)$new(struct \(c.name)_* this_')
									if args.length > 0 {
										forwardFun.push(', ')
										forwardFun.push(args.map((arg, i) => typeToString(argTypes[i]) + arg + '_').join(', '))
									}
									forwardFun.push(');')
								}

								if name == 'new', c.vars.length > 0 {
									// Init fields
									// TODO should it be done after `super()` cause super class may override them?
									for v in c.vars {
										switch v {
											case Var(name, expr, type):
												if let expr = expr {
													// TODO compact `mov` for ints/etc
													let valueStorage = expression(expr)
													if asC {
														functionNow.body.push([
															'_this->',
															name,
															'_ = ',
															valueStorage,
															'; // this.var'
														].join(''))
													} else {
														let kind = 'qword' // TODO
														let fullName = 'this.' + name // TODO
														let fullName = c.name + '$' + name // TODO
														functionNow.body.push('mov \(kind) [' + fullName + '], ' + valueStorage + '; this.var')
													}
												}

											case Const(name, expr, type):
												if let expr = expr {
													// TODO fill here too
												}
											}
									}
								}

								if let expr = expr {
									functionBody(expr)
								} else {
									functionNow.body.push('HX_UNREACHABLE // Abstract method')
								}
								func.finalize()
						}
				}
			}
			virtualTables.push('\n};\n')
			virtualPayload.push('\n};\nstruct \(c.name)_ {')
			virtualPayload.push('\n\tconst struct \(c.name)$$ const * const _')

			var offset = 8 // vTable
			for v in c.vars {
				switch v {
					case Var(name, expr, type):
						if asC {
							virtualPayload.push(';\n\t')
							virtualPayload.push(typeToString(type))
							virtualPayload.push(name)
							virtualPayload.push('_')
						} else {
							typeSection.push('%define \(c.name).\(name) RCX + \(offset)')
						}
						offset += 8 // TODO
					case Const(name, expr, type): // TODO
				}
			}
			virtualPayload.push(';\n};\n')

			for v in c.staticVars {
				switch v {
					// TODO order by size (globally across all globals) (ie align as in structures)
					case Var(name, expr, type):
						if asC {
							dataSection.push('static ' + typeToString(type) + c.name + '$' + name + ';')
						} else {
							dataSection.push(c.name + '$' + name + ' ' + varTypeInit(type))
						}
						fillGlobalVar(c.name + '$' + name, expr, type)
						// TODO init known values non-dynamically (in db)
					case Const(name, expr, type):
						if asC {
							dataSection.push('static ' + typeToString(type) + c.name + '$' + name + ';')
						} else {
							dataSection.push(c.name + '$' + name + ' ' + varTypeInit(type))
						}
						fillGlobalVar(c.name + '$' + name, expr, type)
						// TODO init known values non-dynamically (in db)
				}
			}

			for v in c.staticMethods {
				switch v {
					// TODO why even need to `switch` here? Just store function as class in normalizer, same for var
					case Function(name, expr, args, defaults, funcType):
						switch funcType {
							case Function(argTypes, returns):
								let ref = c.name + '$' + name
								let func = pushFunction(ref)
								func.args = args
								func.argTypes = argTypes
								func.returns = returns
								// TODO defaults
								func.fillInputs()
								functionBody(expr)
								func.finalize()

								forwardFun.push('\n')
								forwardFun.push('static ' + typeToString(returns) + '\(c.name)$\(name)(')
								if args.length > 0 {
									forwardFun.push(args.map((arg, i) => typeToString(argTypes[i]) + arg + '_').join(', '))
								}
								forwardFun.push(');')
						}
				}
			}
		}

		for e in project.enumsSimple {
			for v in e.staticVars {
				switch v {
					// TODO order by size (ie align as in structures)
					case Var(name, expr, type):
						if asC {
							dataSection.push('static ' + typeToString(type) + e.name + '$' + name + ';')
						} else {
							dataSection.push(e.name + '$' + name + ' ' + varTypeInit(type))
						}
						fillGlobalVar(e.name + '$' + name, expr, type)
						// TODO init known values non-dynamically (in db)
					case Const(name, expr, type):
						if asC {
							dataSection.push('static ' + typeToString(type) + e.name + '$' + name + ';')
						} else {
							dataSection.push(e.name + '$' + name + ' ' + varTypeInit(type))
						}
						fillGlobalVar(e.name + '$' + name, expr, type)
						// TODO init known values non-dynamically (in db)
				}
			}

			for v in e.staticMethods {
				switch v {
					// TODO why even need to `switch` here? Just store function as class in normalizer, same for var
					case Function(name, expr, args, defaults, funcType):
						switch funcType {
							case Function(argTypes, returns):
								let ref = e.name + '$' + name
								let func = pushFunction(ref)
								func.args = args
								func.argTypes = argTypes
								func.returns = returns
								// TODO defaults
								func.fillInputs()
								functionBody(expr)
								func.finalize()

								forwardFun.push('\n')
								forwardFun.push('static ' + typeToString(returns) + '\(e.name)$\(name)(')
								if args.length > 0 {
									forwardFun.push(args.map((arg, i) => typeToString(argTypes[i]) + arg + '_').join(', '))
								}
								forwardFun.push(');')
						}
				}
			}
		}

		for e in project.enumsComplex {
			forwardStructs.push(e.name)

			for v in e.staticVars {
				switch v {
					// TODO order by size (ie align as in structures)
					case Var(name, expr, type):
						if asC {
							dataSection.push('static ' + typeToString(type) + e.name + '$' + name + ';')
						} else {
							dataSection.push(e.name + '$' + name + ' ' + varTypeInit(type))
						}
						fillGlobalVar(e.name + '$' + name, expr, type)
						// TODO init known values non-dynamically (in db)
					case Const(name, expr, type):
						if asC {
							dataSection.push('static ' + typeToString(type) + e.name + '$' + name + ';')
						} else {
							dataSection.push(e.name + '$' + name + ' ' + varTypeInit(type))
						}
						fillGlobalVar(e.name + '$' + name, expr, type)
						// TODO init known values non-dynamically (in db)
				}
			}

			for v in e.staticMethods {
				switch v {
					// TODO why even need to `switch` here? Just store function as class in normalizer, same for var
					case Function(name, expr, args, defaults, funcType):
						switch funcType {
							case Function(argTypes, returns):
								let ref = e.name + '$' + name
								let func = pushFunction(ref)
								func.args = args
								func.argTypes = argTypes
								func.returns = returns
								// TODO defaults
								func.fillInputs()
								functionBody(expr)
								func.finalize()

								forwardFun.push('\n')
								forwardFun.push('static ' + typeToString(returns) + '\(func.name)(')
								if args.length > 0 {
									forwardFun.push(args.map((arg, i) => typeToString(argTypes[i]) + arg + '_').join(', '))
								}
								forwardFun.push(');')
						}
				}
			}
		}

		for v in project.globalFuncs {
			switch v {
				case Function(name, expr, args, defaults, funcType):
					switch funcType {
						case Function(argTypes, returns):
							let ref = '' + name + '_'
							let func = pushFunction(ref)
							func.args = args
							func.argTypes = argTypes
							func.returns = returns
							// TODO defaults
							func.fillInputs()
							functionBody(expr)
							func.finalize()

							forwardFun.push('\n')
							forwardFun.push('static ' + typeToString(returns) + '\(name)_(')
							if args.length > 0 {
								forwardFun.push(args.map((arg, i) => typeToString(argTypes[i]) + arg + '_').join(', '))
							}
							forwardFun.push(');')
					}
			}
		}

		for v in project.globalVars {
			switch v {
				// TODO order by size (ie align as in structures)
				case Var(name, expr, type):
					if asC {
						dataSection.push('static ' + typeToString(type) + name + '_;')
						fillGlobalVar('' + name + '_', expr, type)
					} else {
						dataSection.push('global.' + name + ' ' + varTypeInit(type))
						fillGlobalVar('global.' + name, expr, type)
					}
					// TODO init known values non-dynamically (in db)
				case Const(name, expr, type):
					if asC {
						dataSection.push('static ' + typeToString(type) + name + '_;')
						fillGlobalVar('' + name + '_', expr, type)
					} else {
						dataSection.push('global.' + name + ' ' + varTypeInit(type))
						fillGlobalVar('global.' + name, expr, type)
					}
					// TODO init known values non-dynamically (in db)
			}
		}

		functionNow = hexaMain
		for init in project.init {
			functionBody(init)
		}
		hexaMain.finalize()

		// Output
		let result = ['']

		for name in header {
			result.push(name)
			result.push('\n')
		}

		if asC {
			result.push('\n// Types')

			result.push('\nstruct Null$Int32 { int32_t value_; uint8_t has_; };')

			for name in forwardStructs {
				result.push('\nstruct ')
				result.push(name)
				result.push('_;')
			}

			result.push('\n')
			for name in forwardFun {
				result.push(name)
			}

			result.push('\n\n')
			for name in virtualTables {
				result.push(name)
			}

			result.push('\n')
			for name in virtualPayload {
				result.push(name)
			}

			result.push('\n')
		} else {
			result.push('\n; Types')
		}

		for name in typeSection {
			if asC {
				result.push(name)
				result.push(';\n')
			} else {
				result.push('\n')
				result.push(name)
			}
		}

		result.push('\n')

		for name in imports {
			if asC {
				result.push('\n__declspec(dllimport) ')
				result.push(name)
			} else {
				result.push('\nextern ')
				result.push(name)
			}
		}

		result.push('\n')

		let asDll = false
		for name in exports {
			if asC {
				if asDll {
					result.push('\n__declspec(dllexport) ')
				} else {
					// Ok
				}
			} else {
				result.push('\nglobal ')
			}
			result.push(name)
		}

		if asC {
			result.push('\n// Data')
			result.push('\nstatic void* $StdHandle;')
			result.push('\nstatic void* $ProcessHeap;')
			result.push('\n#define $malloc(bytes) HeapAlloc($ProcessHeap, 0x00000008, bytes)')
		} else {
			result.push('\n\nsection .data; Initialized')
			// TODO ^ `alignb 8 or 16`?
		}

		for name in dataSection {
			if asC {
				result.push('\n')
			} else {
				result.push('\n ')
			}
			result.push(name)
		}

		if asC {
			result.push('\n\n// Forwards')
		} else {
			result.push('\n\nsection .bss; Uninitialized\n alignb 8')
		}

		for name in bssSection {
			if asC {
				result.push('\n')
			} else {
				result.push('\n ')
			}
			result.push(name)
		}

		if asC {
			result.push('\nvoid hexaEntry() { // Entry')
			result.push('\n $StdHandle = GetStdHandle((uint32_t)(-11));')
			result.push('\n $ProcessHeap = GetProcessHeap();')
		} else {
			result.push('\n\nsection .text; Code')
			// TODO ^ `alignb 8 or 16`?
			result.push('\nhexaEntry:; Entry')
		}

		for id in strings.values() {
			// TODO call after `mov qword [REL global.rootString]`
			// TODO init root lazily if not inited from another DLL
			if asC {
				result.push('\n String$\(id) = String$fromUTF16z(String\(id));')
			} else {
				result.push('\nlea RCX, [REL String.\(id)]')
				result.push('\ncall String.fromUTF16z')
				result.push('\nmov qword [REL String$\(id)], RAX')
			}
		}

		if asC {
			result.push('\n hexaMain();')
			result.push('\n ExitProcess(0);')
			result.push('\n} // Entry')
		} else {
			// TODO align conditionally if not aligned
			// ^ something like `sub RSP, RSP % 16`
			result.push('\nsub RSP, 8; Align stack pointer to 16 bytes')
			result.push('\nsub RSP, 32; 32 bytes of shadow space')
			//result.push('\nxor ECX, ECX')
			//result.push('\ncall GetModuleHandleA')
			//result.push('\nmov qword [REL hInstance], RAX')
			//result.push('\nadd RSP, 32; Remove the 32 bytes')
			result.push('\ncall hexaMain')
			result.push('\n.hexaEntry.ExitProcess:; Default exit routine')
			//result.push('\n sub RSP, 32; 32 bytes of shadow space')
			result.push('\n xor ECX, ECX')
			result.push('\n call ExitProcess')
		}

		for func in functions {
			if asC {
				let returns = func.returns
				let args = func.args
				let argTypes = func.argTypes

				result.push('\n\n')
				result.push('static ' + typeToString(returns) + '\(func.name)(')

				if let thisType = func.thisType {
					result.push(thisType + 'this_')
					if args.length > 0 {
						result.push(', ')
					}
				}

				if args.length > 0 {
					result.push(args.map((arg, i) => typeToString(argTypes[i]) + arg + '_').join(', '))
				}
				result.push(') {')
			} else {
				result.push('\n\n')
				result.push(func.name)
				result.push(':')
			}

			for line in func.body {
				result.push('\n ')
				result.push(line)
			}

			if asC {
				result.push('\n};')
			}
		}

		// Generate both for console and GUI
		// TODO console
		if asC {
			result.push('\n\nvoid wWinMainCRTStartup() { hexaEntry(); };')
			result.push('\n\nvoid TODO() { wWinMainCRTStartup(); };')
		} else {
			// TODO
		}

		result.push('\n\n#ifdef __cplusplus')
		result.push('\n}')
		result.push('\n#endif')
		result.push('\n')

		return result.join('')
	}

	let typeStrings: [Type : String] = [:]

	// Note: returns with ending space
	fun typeToString(type: Type): String {
		if let string = typeStrings.get(type) {
			return string
		}

		var string = '? '

		// TODO more primitive types
		// TODO pointers
		// TODO by values
		// TODO generics
		// TODO structs
		// TODO cache optional<Int> in typer?
		if type == project.typer.typeBool {
			string = 'uint8_t '
		} else

		if type == project.typer.typeInt {
			string = 'int32_t '
		} else

		if type == project.typer.typeUInt32 {
			string = 'uint32_t '
		} else

		if type == project.typer.typeVoid {
			string = 'void '
		} else

		if type == project.typer.typeAny {
			string = 'struct Any_* '
		} else {
			switch type {
				case ClassInstance(classType, generic): {
					if let gen = generic {
						fun unwrapType(type: Type): Type {
							switch type {
								case Unknown(handle): return unwrapType(handle.value)
							}
							return type
						}

						fun unrollGenerics(generic: [Type]): [String] {
							return generic.map((gen: Type) => switch unwrapType(gen) {
								case ClassInstance(classType, generic):
									var result = classType.name

									if let gen = generic {
										// result += '$' + unrollGenerics.join('$') TODO why no error
										result += '$' + unrollGenerics(gen).join('$')
									}

									result
								case null: 'NOT_INFERRED'
								case _: '?<' + unwrapType(gen) + '>'
							})
						}

						string = 'struct ' + classType.name + '$' + unrollGenerics(gen).join('$') + '* '
					} else {
						string = 'struct ' + classType.name + '_* '
					}
				}

				case Nullable(t):
					// TODO more basic types
					if type == project.typer.typeBool {
						string = 'uint8_t ' // Ok
					} else
					if type == project.typer.typeInt {
						string = 'struct Null$Int32 '
					} else {
						return typeToString(t)
					}
			}
		}

		typeStrings.set(type, string)
		return string
	}

	var busyRegisters = []

	/// Scratch registers
	/// Not arguments
	/// Not required to be saved and restored
	var freeRegisters = ['R10', 'R11']

	fun allocateRegister(): String {
		// TODO fallback to stack
		return freeRegisters.pop()
	}

	fun freeRegister(name: String): Void {
		freeRegisters.push(name)
	}

	fun typeToSize(type: Type): Int {
		return 8 // TODO
	}

	fun storageToSize(storage: String): Int {
		if storage == null {
			return 999 // TODO throw
		}

		if let size = functionNow.storageSizes.get(storage) {
			return size
		}

		if storage == 'RAX' {
			return 8
		}

		if storage.startsWith('qword ') {
			return 8
		}

		if storage.startsWith('dword ') {
			return 4
		}

		return 8 // TODO
	}

	fun omitPointer(type: String): String {
		if type.endsWith('* ') {
			return type.substr(0, type.length - 2) + ' '
		}

		return type
	}

	fun omitStruct(type: String): String {
		if type.startsWith('struct ') {
			return type.substr('struct '.length).replace(' ', '')
		}

		return type
	}

	fun expression(e: Expression): String {
		switch e {
			case Null: {
				if asC {
					return 'nullptr'
				} else {
					return '0'
				}
			}
			case True: return '1'
			case False: return '0'
			case This(me): {
				if asC {
					return 'this_'
				} else {
					return 'RCX'
				}
			}

			case MetaInt(v, meta, type): {
				if asC {
					switch meta {
						case Int32: return '(int32_t)' + v
						case Int64: return '(int64_t)' + v
						case Int16: return '(int16_t)' + v
						case Int8: return '(int8_t)' + v

						case UInt32: return '(uint32_t)' + v
						case UInt64: return '(uint64_t)' + v
						case UInt16: return '(uint16_t)' + v
						case UInt8: return '(uint8_t)' + v
					}
				} else {
					// TODO
				}
			}

			case Int(v): {
				// Return immediate value
				return '' + v

				let storage = 'RAX'
				functionNow.body.push('mov ' + storage + ', ' + v + '; int')
				return storage
			}

			case Parenthesis(inner): {
				let aSimpleRef = referenceToStorage(inner)
				let aStorage = aSimpleRef ?? expression(inner)
				return '(' + aStorage + ')'
			}

			case String(s): {
				if let id = strings.get(s) {
					if asC {
						return 'String$\(id)' // TODO ARC++
					} else {
						return '[REL String$\(id)]'
					}
				} else {
					let id = stringId++
					let text = s.split("'").join("\'")
					// TODO let text = s.replaceAll("'", "\'")
					if asC {
						// TODO mirror \n \t etc
						dataSection.push('static const wchar_t *String\(id) = L"\(text)";')
						// Note: `const char[]` causes compiler to make a copy of the entire string on every usage
						bssSection.push("static struct String_* String$\(id);")
					} else {
						dataSection.push("String.\(id) dw __utf16le__('\(text)'), 0")
						bssSection.push("String$\(id) resq 1")
					}
					strings.set(s, id)
					if asC {
						return 'String$\(id)' // TODO ARC++
					} else {
						return '[REL String$\(id)]'
					}
				}
			}

			case Array(values, arrayType): {
				//let tempAllocated = functionNow.allocateTempVar()
				let temp = functionNow.allocateTempVar()
				let type = typeToString(arrayType)
				let byValue = omitPointer(type)
				let byName = omitStruct(byValue)
				functionNow.body.push(type + temp + ' = (\(type))$malloc(sizeof(\(byValue)));')
				functionNow.body.push('\(byName)$new(\(temp));')

				for value in values {
					let aSimpleRef = referenceToStorage(value)
					let aStorage = aSimpleRef ?? expression(value)
					functionNow.body.push('\(temp)->_->push_(\(temp), \(aStorage));')
				}

				return temp
			}

			case New(e, args, result): {
				//let tempAllocated = functionNow.allocateTempVar()
				let temp = functionNow.allocateTempVar()
				let type = typeToString(result)
				let byValue = omitPointer(type)
				let byName = omitStruct(byValue)
				functionNow.body.push(type + temp + ' = (\(type))$malloc(sizeof(\(byValue)));')
				var init = '\(byName)$new(\(temp)'

				if args.length > 0 {
					init += ', '
				}

				init += [for arg in args {
					let aSimpleRef = referenceToStorage(arg)
					let aStorage = aSimpleRef ?? expression(arg)
					aStorage
				}].join(', ')

				functionNow.body.push(init + ');')
				return temp
			}

			case Call(e, args, result, kind): {
				let aSimpleRef = referenceToStorage(e)
				let aStorage = aSimpleRef ?? expression(e)

				return (aStorage + '(' + [for arg in args {
					let aSimpleRef = referenceToStorage(arg)
					let aStorage = aSimpleRef ?? expression(arg)
					aStorage
				}].join(', ') + ')')
			}

			case Ident(name, type): {
				if functionNow.getVar(name) == null {
					return name + '_'
				}
				return functionNow.getVar(name)
			}

			case Unop(op, postfix, e):
				let token = Token.stringify(op)
				let aStorage = expression(e)

				if postfix {
					return aStorage + token
				}

				return token + aStorage

			case Binop(a, op, b, result): {
				// TODO proposeStorage('RAX') or just allocate within expression(a) if RAX busy
				let aSimpleRef = referenceToStorage(a)
				let aStorage = aSimpleRef ?? expression(a)
				// TODO let aResult = allocateRegisterIfProposedUnused()
				let bytes = storageToSize(aStorage) // TODO better way
				let aResult = aSimpleRef ?? functionNow.allocate(bytes)
				let token = Token.stringify(op)

				// Store value of `a` into temp var to avoid name collisions
				// Avoids temp if possible (if simple static or local read)
				if aSimpleRef == null, not asC {
					functionNow.body.push('mov ' + aResult + ', ' + aStorage + '; a \(token) b')
				}

				// TODO same for `a`
				let bResult =
				switch b {
					case Int(v): '' + v
					case _: expression(b)
				}

				if asC {
					return aResult + ' ' + token + ' ' + bResult
				}

				switch op {
					case OpAdd: {
						if asC {
							return aResult + ' + ' + bResult
						}

						let temp = 'R10' // We do NOT modify left operand!
						functionNow.body.push('mov \(temp), ' + aResult)
						functionNow.body.push('add \(temp), ' + bResult)
						return temp
					}

					case OpEq | OpNotEq | OpGt | OpGte | OpLt | OpLte: {
						let temp = 'R10' // We do NOT modify left operand!
						functionNow.body.push('cmp \(aResult), ' + bResult)
						switch op {
							case OpEq: {
								functionNow.body.push('sete al')
							}

							case OpNotEq: {
								functionNow.body.push('setne al')
							}

							// TODO `if a > b` can be optimized to `jle`
							case OpGt: {
								functionNow.body.push('setg al')
							}

							case OpGte: {
								functionNow.body.push('setge al')
							}

							case OpLt: {
								functionNow.body.push('setl al')
							}

							case OpLte: {
								functionNow.body.push('setle al')
							}
						}
						functionNow.body.push('and al, 1') // Convert to exact `true` value
						functionNow.body.push('movzx \(temp), al') // Zero extend
						return temp
					}

					case _: {
						functionNow.body.push('.UNKNOWN_BIN_OP_' + token)
					}
				}
				// TODO freeRegister/freeStorage(bStorage) b never referenced after this point
				// TODO ^same thing for func args (and other many-to-one expressions)
			}

			case Dot(expr, name, result): {
				switch expr {
					case Ident(typeName, type): {
						// TODO is this always a static access?
						return  `dword [REL ` + typeName + '$' + name + `]`
						// TODO detect size
					}
					case _:
						return expression(expr)
				}
			}

			case UnsafeBitCast(expr, to): {
				return '(' + typeToString(to) +  ')(' + expression(expr) + ')'
			}

			case _: {
				functionNow.body.push(';.?Expression:; ' + e)
			}
		}

		// TODO print this to log
		return 'UNKNOWN_EXPRESSION_' + (e as! [String])[(e as! [String]).length - 1]
	}

	fun referenceToStorage(ref: Expression): String? {
		switch ref {
			case Dot(expr, name, result): {
				switch expr {
					case Ident(typeName, type): {
						if asC {
							return typeName + '_->' + name + '_'
						}
						// TODO is this always a static access?
						return  `qword [REL ` + typeName + '$' + name + `]`
						// TODO detect size
					}
					case This(me): {
						switch me {
							case ClassInstance(type):
								return `qword [` + type.name + '$' + name + `]`
								// TODO detect size
							case Class(type):
								return `qword [` + type.name + '$' + name + `]`
								// TODO detect size
							case _: return 'UNKNOWN_THIS_STORAGE_' + me
						}
					}
					case _:
						return expression(expr)
				}
			}

			case Ident(name, type): {
				return functionNow.getVar(name) ?? name + '_'
			}

			case _: {
				//throw 'Unknown ref format ' + ref
			}
		}

		return null
	}

	fun functionBody(expr: Statement): Void {
		switch expr {
			case Block(el): {
				for e in el {
					functionBody(e)
				}
			}

			case Assign(name, value, to): {
				let storage = referenceToStorage(name) ?? 'UNKNOWN_STORAGE' // TODO guard
				let valueStorage =

				switch value {
					case Int(v): '' + v
					case _: expression(value)
				}

				if asC {
					functionNow.body.push(storage + ' = ' + valueStorage + '; // name = value')
				} else {
					functionNow.body.push('mov ' + storage + ', ' + valueStorage + '; name = value')
				}
			}

			case Var(name, expr, type): {
				let bytes = typeToSize(type)
				let storage = functionNow.allocateVar(name, bytes, typeToString(type))
				let valueStorage =

				switch expr {
					case Int(v): '' + v
					case _: expression(expr)
				}

				if asC {
					functionNow.body.push(storage + ' = ' + valueStorage + '; // var ' + name)
				} else {
					functionNow.body.push('mov ' + storage + ', ' + valueStorage + '; var ' + name)
				}
			}

			case Const(name, expr, type): {
				let bytes = typeToSize(type)
				let storage = functionNow.allocateVar(name, bytes, typeToString(type))
				let valueStorage =

				switch expr {
					case Int(v): '' + v
					case _: expression(expr)
				}

				if asC {
					functionNow.body.push(storage + ' = ' + valueStorage + '; // let ' + name)
				} else {
					functionNow.body.push('mov ' + storage + ', ' + valueStorage + '; let ' + name)
				}
			}

			case If(econd, eif, eelse): {
				var idIf = functionNow.labels++
				// TODO dot `.label` required for NASM local labels
				functionNow.body.push('_if_begin_\(idIf):') // TODO remove in release
				// TODO shortcut when `justVar cmp justConst` and otherwise
				let storage = expression(econd)
				// TODO is RAX always ok? no need to allocate temp vars?

				functionNow.body.push('cmp \(storage), 0')
				if let eelse = eelse {
					functionNow.body.push('je _else_\(idIf)')
				} else {
					functionNow.body.push('je _if_end_\(idIf)')
				}

				functionBody(eif)
				if let eelse = eelse {
					if asC {
						functionNow.body.push('goto _if_end_\(idIf);')
					} else {
						functionNow.body.push('jmp _if_end_\(idIf)')
					}
				}

				if let eelse = eelse {
					functionNow.body.push('_else_\(idIf):')
					functionBody(eelse)
				}
				functionNow.body.push('_if_end_\(idIf):')
			}

			case Call(e, args, expects, kind): {
				switch kind {
					case Static:
					case Function:
					case VirtualMethod:
				}

				let aSimpleRef = referenceToStorage(e)
				let aStorage = aSimpleRef ?? expression(e)

				functionNow.body.push(aStorage + '(' + [for arg in args {
					let aSimpleRef = referenceToStorage(arg)
					let aStorage = aSimpleRef ?? expression(arg)
					aStorage
				}].join(', ') + ');')

				/*let tempAllocated = functionNow.allocateTempVar()
				let temp = functionNow.allocateTempVar()
				let type = typeToString(result)
				let byValue = omitPointer(type)
				let byName = omitStruct(byValue)
				functionNow.body.push(type + tempAllocated + ' = (\(type))$malloc(sizeof(\(byValue)));')
				var init = '\(byName)$new(\(tempAllocated)'

				if args.length > 0 {
					init += ', '
				}

				init += [for arg in args {
					let aSimpleRef = referenceToStorage(arg)
					let aStorage = aSimpleRef ?? expression(arg)
					aStorage
				}].join(', ')

				functionNow.body.push(init + ');')
				return temp*/
			}

			case Return(e): {
				if let e = e {
					let storage = expression(e)

					if storage != 'RAX' {
						if asC {
							functionNow.body.push('return ' + storage + ';')
						} else {
							functionNow.body.push('mov RAX, ' + storage + '; return value')
						}
					}
				}

				if asC {
				} else {
					functionNow.body.push('jmp .return')
				}
			}

			case Increment(e): functionNow.body.push(expression(e) + '++;')
			case Decrement(e): functionNow.body.push(expression(e) + '--;')

			case For(name, over, by):
				functionNow.body.push('// TODO For')

			case _:
				functionNow.body.push(';.?:; ' + expr)
		}
	}
}
