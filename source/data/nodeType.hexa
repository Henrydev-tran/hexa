// The Hexa Compiler
// Copyright (C) 2021-2022 Oleh Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

/// `var a: NodeType`
enum NodeType {
	/// `T?`
	Optional(type: NodeType)

	/// `T` or `path.T`
	Type(name: String, path: String?)

	/// `T<K, V>`
	// TODO delete Type and always just use ParametricType with params==null`null!!!!`
	ParametricType(name: String, params: [NodeType], path: String?)

	/// `(T, T) => T`
	Function(args: [NodeType], ret: NodeType)

	/// `(T, T) => T`
	// TODO named args or what?
	FunctionArg(name: String, type: NodeType, defaultValue: Node)

	/// `{ a: T, b: T}`
	// TODO `{ let a: T, var b: T}`
	Object(names: [String], types: [NodeType])

	// Expression-like for evaluating dependent types

	/// `ident`
	Ident(name: String)

	/// `123`
	Int(value: Int)

	/// `0.123`
	Float(value: Float)

	/// `"text"`
	String(value: String)

	// `name(argName: value)`
	Call(name: String, argNames: [String], values: [NodeType])

	/// Readable string representation
	static fun stringify(nodeType: NodeType): String {
		switch nodeType {
			case Optional(type):
				return NodeType.stringify(type) + '?'
			case Object(names, types):
				// TODO i: `return [for i : name in names`
				if names.length == 0 {
					return '{}'
				}
				return '{ ' + [for i in names.length
					names[i] + ': ' + NodeType.stringify(types[i])
				].join(', ') + ' }'
			case Function(args, ret):
				return '(' + args.map(arg => NodeType.stringify(arg)).join(', ') + ') => ' + NodeType.stringify(ret)
		}
		return DataHelper.extractTypeName(nodeType)
	}

	/// Deep cloning, normally used for generic instances
	static fun clone(nodeType: NodeType): NodeType {
		switch nodeType {
			case Type(name, path):
				return NodeType.Type(name, path)
			case ParametricType(name, params, path):
				return NodeType.ParametricType(name, params.map(param => NodeType.clone(param)), path)
		}

		console.error('Cannot clone node type', nodeType)
		return nodeType
	}
}
