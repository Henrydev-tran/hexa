// The Hexa Compiler
// Copyright (C) 2021-2022 Oleh Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

//NIR
//
////WASM use LLVM
//LLVM
//
//>>> instead of C target, just plain C++ target (revert to it)
//^ C is useless without NIR like 100% and makes confusion
//also completely uinreadable
//
//class NirStructure {
//	var hint: String = '?'
//
//	new () {}
//}
//
//let structures: [NirStructure]
//
//enum NirType {
//	Structure(index: Int)
//
//
//}
//
//no expressions!!! i.e. no a(b(c)) and no z(a + b + c),
//only x = a + b, y = x + c, z(y)
//
//enum NirKind {
//	Slt
//	Eq
//}
//
//// Negative <= 0 id is function argument: (0, -1, -2, -3)
//enum NirLine {
//	// TODO consider SSA for everything??? cause no Alloca! TODO
//	/*
//		Instead of putting on the stack
//		lay out in registers, and only read the allocation count on the stack
//		after the fact of exhaustion is already in the generator itself, and not in the NIR
//	*/
//	// Memory
//	Alloca(id: Int, type: NirType, hint: String)
//	AllocaStore(id: Int, type: NirType, idValue: Int, hint: String)
//	Store(idValue: Int, idStorage: Int)
//	Load(idStorage: Int, idResult: Int)
//	Constant(id: Int, type: NirType, value: String)
//
//	// Computation
//	Add(idLeft: Int, idRight: Int, idResult: Int)
//	Compare(kind: NirKind, idLeft: Int, idRight: Int, idResult: Int)
//	CompareAndJump(kind: NirKind, idLeft: Int, idRight: Int, idResult: Int, idLabel: Int)
//
//	// Control flow
//	Return(id: Int)
//	Label(id: Int, hint: String)
//	GoTo(id: Int, hint: String)
//	GoToIf(idBool: Int, idTrue: Int, idFalse: Int, hint: String)
//}
//
//class NirFunction {
//	var hint: String = '?'
//	var argTypes: [NirType] = []
//
//
//	new () {}
//}
//
