// The Hexa Compiler
// Copyright (C) 2018-2020 Oleh Petrenko
// Copyright (C) 2018 Bogdan Danylchenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

/// List of all available lexemes and tokens
enum Token : Int {
	// Default
	Eof          = 0
	Default      = 123 // Simplifies some parsing
	// TODO why all those manual `= N`? `Default` could be just the latest in the list
	// TODO describe why limit is 127, UTF-8 related, make some validation like `@maxAllowed(127) enum`

	// Keywords
	// Order has no special sense
	KBreak       = 3
	KCase        = 4
	KCatch       = 6
	KClass       = 7
	KContinue    = 8
	KDo          = 9
	KElse        = 10
	KEnum        = 11
	KExtends     = 12
	KDeclare     = 13
	KFalse       = 14
	KFor         = 15
	KFun         = 21
	KIf          = 17
	KImplements  = 18
	KImport      = 2
	KIn          = 20
	KInterface   = 22
	KLet         = 23
	KNew         = 25
	KNull        = 26
	KPrivate     = 29
	KReturn      = 31
	KStatic      = 32
	KSwitch      = 33
	KThis        = 34
	KThrow       = 35
	KTrue        = 36
	KTry         = 37
	KVar         = 40
	KWhile       = 41
	KIs			 = 57
	KAs          = 58
	KSuper       = 59
	KNot         = 89

	// Literals
	FloatingPoint = 60 // 0.123
	Title         = 61 // Word
	Identifier    = 62 // word
	Integer       = 63 // 123
	QuotedString  = 64 // "" and ''
	Documentation = 65 // /// doc
	Backtick      = 66 // ``

	// Symbols
	Underscore   = 1  // _
	At           = 70 // @
	IndexClose   = 71 // ]
	IndexOpen    = 72 // [
	BlockClose   = 73 // }
	BlockOpen    = 74 // {
	Comma        = 75 // ,
	Colon        = 76 // :
	Dot          = 77 // .
	Sharp        = 78 // #
	CallClose    = 79 // )
	CallOpen     = 80 // (
	Question     = 81 // ?
	Semicolon    = 82 // ;
	Query        = 83 // $
	Interval     = 98 // ...
	// Exclamation  = 89 // ! TODO extra !. single operator, ! to be postfix
	// TODO ^ also consider Unary.UnwrapOptional name

	// Unary
	Decrement  = 86 // -- TODO rename to UnaryDecrement or Decrement
	Increment  = 87 // ++
	BitwiseNot = 88 // ~

	// Binary
	RightArrow         = 90 // =>
	Assign             = 91 // =
	LogicalAnd         = 92 // &&
	LogicalOr          = 93 // ||
	Divide             = 94 // /
	Equal              = 95 // == TODO // com as /// doc for all values
	Greater            = 96 // >
	GreaterOrEqual     = 97 // >=
	Less               = 99 // <
	LessOrEqual        = 100 // <=
	Remainder          = 101 // %
	Multiply           = 102 // `*`
	Unequal            = 103 // !=
	// TODO consider creating += -= >>>= tokens
	// ^ not, to use in parser, there should be a way
	// to get >>> from >>>= by doing token - offset or something
	BitwiseOr          = 104 // |
	BitwiseLeftShift   = 105 // <<
	BitwiseRightShift  = 106 // >>
	Subtract           = 107 // -
	UnsignedRightShift = 108 // >>>
	BitwiseXor         = 109 // ^
	IntegerDivide      = 110 // \
	Add                = 111 // +
	BitwiseAnd         = 112 // &
	OptionalChain      = 113 // ?.

	static fun stringify(token: Token, param: String? = null): String {
		// TODO should be `return switch` cause *no* final return (must be detected for non-exhaustive cases)
		switch token {
			case At: return "@"
			case Query: return "$"
			case Sharp: return "#"
			case BkClose: return "]"
			case BkOpen: return "["
			case BrClose: return "}"
			case BrOpen: return "{"
			case Colon: return ":"
			case Comma: return ","
			case Default: return "<!--empty-->"
			case Dot: return "."
			case Eof: return "<!--end-->"
			case Interval: return "..."
			case KAs: return "as"
			case KBreak: return "break"
			case KCase: return "case"
			case KCatch: return "catch"
			case KClass: return "class"
			case KContinue: return "continue"
			case KDo: return "do"
			case KElse: return "else"
			case KEnum: return "enum"
			case KExtends: return "extends"
			case KDeclare: return "declare"
			case KFalse: return "false"
			case KFor: return "for"
			case KFun: return "fun"
			case KIf: return "if"
			case KImplements: return "implements"
			case KImport: return "import"
			case KIn: return "in"
			case KInterface: return "interface"
			case KLet: return "let"
			case KNew: return "new"
			case KNull: return "null"
			case KPrivate: return "private"
			case KReturn: return "return"
			case KStatic: return "static"
			case KSuper: return "super"
			case KSwitch: return "switch"
			case KThis: return "this"
			case KThrow: return "throw"
			case KTrue: return "true"
			case KTry: return "try"
			case KVar: return "var"
			case KWhile: return "while"
			case OpAdd: return "+"
			case OpAnd: return "&"
			case OpArrow: return "=>"
			case OpAssign: return "="
			case OpBoolAnd: return "&&" // We keep it like this (not `and`) to simplify JavaScript generation
			case OpBoolOr: return "||"
			case OpDecrement: return "--"
			case OpDiv: return "/"
			case OpEq: return "=="
			case OpGt: return ">"
			case OpGte: return ">="
			case OpIncrement: return "++"
			case OpIntDiv: return "\\"
			case OpLt: return "<"
			case OpLte: return "<="
			case OpMod: return "%"
			case OpMult: return "*"
			case OpNegBits: return "~"
			case OpNot: return "!"
			case OpNotEq: return "!="
			case OpOr: return "|"
			case OpShl: return "<<"
			case OpShr: return ">>"
			case OpSub: return "-"
			case OpUShr: return ">>>"
			case OpXor: return "^"
			case OpChain: return "?."
			case PClose: return ")"
			case POpen: return "("
			case Question: return "?"
			case Semicolon: return ";"
			case Underscore: return "_"
			case LUpper: return (param == null)? 'TitleCase' : param
			case LString: return (param == null)? 'string' : '\'\(param)\''
			case LBacktick: return (param == null)? 'backtick' : '`\(param)`'
			case LLower: return (param == null)? 'identifier' : param
			case LInt: return (param == null)? 'integer' : param
			case LFloat: return (param == null)? 'float' : param
			case LDoc: return '///\(param)'
			case KIs: return "is"
		}
	}
}

enum Meta : #if native UInt8 #else Int #end {
	Default

	BigInt

	Int32
	Int64
	Int16
	Int8

	UInt32
	UInt64
	UInt16
	UInt8

	Float32
	// Float64 -> Float is 64-bit by Default

	// TODO autogenerate string-fer meta-method for enums
	static fun stringify(kind: Meta) {
		switch kind {
			case Default: return 'Default'
			case BigInt: return 'BigInt'
			case Int32: return 'Int32'
			case Int64: return 'Int64'
			case Int16: return 'Int16'
			case Int8: return 'Int8'
			case UInt32: return 'UInt32'
			case UInt64: return 'UInt64'
			case UInt16: return 'UInt16'
			case UInt8: return 'UInt8'
			case Float32: return 'Float32'
		}
		// TODO this code is unreachable, infer this in typer/normalizer somehow
		// (mark switch as exhaustive + all cases returning/exiting?)
	}
}
