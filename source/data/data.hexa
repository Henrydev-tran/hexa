// The Hexa Compiler
// Copyright (C) 2021-2024 Oleh Petrenko
// Copyright (C) 2018 Bogdan Danylchenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// TODO refactor to nodes.hexa
// TODO move to nodes.hexa
/// Syntax tree
// TODO unindent
enum Node {
	/// `"text"`
	String(text String)

	/// `ident` or `ident<T>`
	Ident(name String, params [NodeType])
	// TODO Ident(name String, params `[NodeType]?`)

	/// `true`/`false`
	Bool(bool Bool)

	/// `this`
	This

	/// `super`
	Super

	/// `123`
	Int(number Int)

	/// `123n`
	/// `123u32`
	MetaInt(number BigInt, meta Meta)

	/// `0.123`
	Float(number Float, meta Meta)

	/// `null`
	Null

	/// `declare Alias = Value`
	TypeAlias(alias NodeType, value NodeType)

	/// `left op right` like `a + b`
	// TODO rename to `Binary` or `Infix`
	Binop(left Node, op Token, right Node)

	/// `storage op= value`
	AssignOp(storage Node, op Token, value Node)

	/// { el[0] ... el[n] }
	Block(el [Node])

	/// e(args[0], ...args[n])
	Call(e Node, args [Node], argNames [String]/*, generic [NodeType]*/)

	/// if econd[0], ...econd[n] { eif } [else { eelse }]
	// TODO rename to `econd=condition`, `eif=then`, `eelse=otherwise`
	If(econd [Node], eif Node, eelse Node?, ternary Bool)

	/// `(inner)`
	Parenthesis(inner Node)

	/// `return e`
	Return(e Node?)

	/// `throw e`
	Throw(e Node)

	/// `break`
	Break

	/// `continue`
	Continue

	/// postfix ? e op : op e
	// TODO rename to `Unary`
	Unop(op Token, postfix Bool, e Node)

	/// while reason { e } or if pre == true then do { e } while reason
	While(reason Node, e Node, pre Bool)

	/// `declare fun name<params>(vars) retType { body }`
	// Name is `new` for constructor
	// TODO expr Node.Block (goal is *not* to `Node extends NodeBlock` but to actually limit tags)
	Function(name String?, body Node, vars [Node], retType NodeType, external Bool, variadic Bool)


	/// (vars) retType => expr
	// TODO parser `: retType` is really needed at all?
	Arrow(expr Node, vars [Node], retType NodeType)

	/// [external ? declare] (const ? let : var) name nodeType [= expr]
	// `varStatic` =>> `funStatic` `varPrivate` etc
	// TODO `expr Node?`
	Var(name String, varType NodeType, expr Node, const Bool, external Bool)

	/// external class t extends extend implements implement { fields }
	Class(t NodeType, extend NodeType?, implement [NodeType], fields [Node], external Bool, kind ClassKind)

	/// var name T { get { return x } set (v) {} }
	// TODO .Var, .Function, .Function
	Property(field Node, getter Node, setter Node)

	/// try { expr } catch v[0]: t[0] { catches[0] } ... catch v[n]: t[n] { catches[n] }
	Try(expr Node, t [NodeType], v [Node], catches [Node])

	/// `expr.name`
	Dot(expr Node, name String)

	/// expr.Name
	DotUpper(expr Node, name String)

	/// `new T<T> { } (args)` TODO new syntax
	New(path [String], t NodeType, args [Node], fields [String], el [Node], argNames [String])

	/// [elements[0], ...elements[n]]
	Array(elements [Node])

	/// [keys[0] : values[0], ... keys[n] : values[n]]
	Map(keys [Node], values [Node])

	/// expr[index]
	Index(expr Node, index Node)

	/// switch exprs[0], exprs[n] {
	///     case cases[0]: conds[0]
	///     case cases[n]: conds[n]
	/// }
	Switch(exprs [Node], conds [Node], guards [Node], cases [Node])

	/// module path[0].path[1].r..path[n] { el }
	Module(path String, el [Node])

	/// Not present in syntax, used for typing
	ModuleExports(handle Module)

	/// import xxx as yyy in "test"
	Import(el [ImportNode], path String)

	/// { name[0]: el[0], name[1]: el[1], ... name[n]: el[n] }
	// NOTE: Do not use Map here
	Object(names [String], el [Node])

	/// enum t : valuesType extends extend { fields[0] ... fields[n] }
	Enum(enumType/*uniq name classType etc for easy bind*/ NodeType, fields [Node], valuesType NodeType?, extend NodeType?)

	/// let expr(extract[0], ..., extract[n]) = name
	EnumExtract(path [String], bind [Node/*.Var*/], expr Node)

	/// `expr is T`
	Is(expr Node, aType NodeType)

	/// `expr as T`
	/// `expr as? T`
	/// `expr as! T`
	As(expr Node, kind Token, toType NodeType)

	/// `_`
	Underscore

	/// `...`
	Interval

	/// `static` field
	Static(field Node)

	/// `private` field or type
	Private(field Node)

	/// for name in over by
	/// for name in over ... range by
	For(name String, over Node, by Node, range Node)

	/// `nullable ?? othewise`
	Elvis(nullable Node, otherwise Node)

	/// `T<A, B>` but as expression
	NodeTypeValue(type NodeType)

	/// Produces readable string representation for node
	// TODO to non-static method
	static fun stringify(node Node) String {
		switch node {
			case String(s): return "'\(s)'"
			case Ident(name): return name
			case Bool(b): return b? "true" : "false"
			case Int(s): return s.toString()
			case Float(s): return s.toString()
			case Null: return "null"
			case This: return "this"
			case Parenthesis(expr): return "(" + Node.stringify(expr) + ")"
			case Index(expr, index): return Node.stringify(expr) + '[' + Node.stringify(index) + ']'
			case Dot(expr, name): return Node.stringify(expr) + '.' + name
			case DotUpper(expr, name): return Node.stringify(expr) + '.' + name
			case Call(e, args, argNames):
				let arg = []
				for i in args.length {
					if let name = argNames[i] {
						arg.push(name + ': ' + Node.stringify(args[i]))
					} else {
						arg.push(Node.stringify(args[i]))
					}
				}
				return Node.stringify(e) + '(' + arg.join(', ') + ')'
			case Array(elements): return '[' + [for el in elements Node.stringify(el)].join(', ') + ']'
			case Binop(a, op, b): return Node.stringify(a) + ' ' + Token.stringify(op) + ' ' + Node.stringify(b)
			case Object(names, el):
				return '{' + [for i in el.length names[i] + ': ' + Node.stringify(el[i])].join(', ') + '}'
			case NodeTypeValue(t):
				return DataHelper.extractTypeName(t)
			case Static(f): return 'static ' + Node.stringify(f)
			case _:
				return "..."
		}
	}

	/// Creates recursive tree clone, also clones positions and decorators
	static fun clone(project Project, node Node?) Node? {
		let p = project
		@allCases // TODO `@strict return switch` or `return @strict switch`
		switch node {
			// TODO this should have been a macro
			case String(s):
				return cloneData(p, node, Node.String(s))
			case Ident(name, params):
				if let params = params {
					return cloneData(p, node, Node.Ident(name, params.map(param => NodeType.clone(param))))
				}
				return cloneData(p, node, Node.Ident(name, null))
			case Bool(b):
				return cloneData(p, node, Node.Bool(b))
			case Int(s):
				return cloneData(p, node, Node.Int(s))
			case MetaInt(number, meta):
				return cloneData(p, node, Node.MetaInt(number, meta))
			case Float(s, meta):
				return cloneData(p, node, Node.Float(s, meta))
			case Null:
				return cloneData(p, node, Node.Null)
			case This:
				return cloneData(p, node, Node.This)
			case Parenthesis(expr):
				return cloneData(p, node, Node.Parenthesis(cloneData(p, expr, clone(p, expr))))
			case Index(expr, index):
				return cloneData(p, node, Node.Index(
					cloneData(p, expr, clone(p, expr)),
					cloneData(p, index, clone(p, index))
				))
			case Dot(expr, name):
				return cloneData(p, node, Node.Dot(cloneData(p, expr, clone(p, expr)), name))
			case DotUpper(expr, name):
				return cloneData(p, node, Node.DotUpper(cloneData(p, expr, clone(p, expr)), name))
			case Call(e, args, argNames):
				return cloneData(p, node, Node.Call(cloneData(p, e, clone(p, e)), args.map(arg => cloneData(p, arg, clone(p, arg))), argNames))
			case Array(elements):
				return cloneData(p, node, Node.Array(elements.map(arg => cloneData(p, arg, clone(p, arg)))))
			case Binop(a, op, b):
				return cloneData(p, node, Node.Binop(cloneData(p, a, clone(p, a)), op, cloneData(p, b, clone(p, b))))
			case AssignOp(storage, op, value):
				return cloneData(p, node, Node.AssignOp(cloneData(p, storage, clone(p, storage)), op, cloneData(p, value, clone(p, value))))
			case For(name, over, by, range):
				return cloneData(p, node, Node.For(
					name: name,
					over: cloneData(p, over, clone(p, over)),
					by: cloneData(p, by, clone(p, by)),
					range: cloneData(p, range, clone(p, range))
				))
			case While(reason, e, pre):
				return cloneData(p, node, Node.While(
					cloneData(p, reason, clone(p, reason)),
					cloneData(p, e, clone(p, e)),
					pre
				))
			case Switch(exprs, conds, guards, cases):
				return cloneData(p, node, Node.Switch(
					// TODO replace to `cloneNodes([Node])`
					exprs.map(arg => cloneData(p, arg, clone(p, arg))),
					conds.map(arg => cloneData(p, arg, clone(p, arg))),
					guards.map(arg => cloneData(p, arg, clone(p, arg))),
					cases.map(arg => cloneData(p, arg, clone(p, arg)))
				))
			case Object(names, el):
				return cloneData(p, node, Node.Object(names, el.map(arg => cloneData(p, arg, clone(p, arg)))))
			case NodeTypeValue(t):
				return cloneData(p, node, Node.NodeTypeValue(t))
			case As(expr, kind, toType): {
				return cloneData(p, node, Node.As(
					expr: cloneData(p, expr, clone(p, expr)),
					kind: kind,
					toType: NodeType.clone(toType)
				))
			}
			case New(path, t, args, fields, el, argNames): {
				return cloneData(p, node, Node.New(
					path: path,
					t: t,
					args: args.map(arg => cloneData(p, arg, clone(p, arg))),
					fields: fields,
					el: el.map(arg => cloneData(p, arg, clone(p, arg))),
					argNames: argNames
				))
			}
			case Unop(op, postfix, e): {
				return cloneData(p, node, Node.Unop(
					op: op,
					postfix: postfix,
					e: cloneData(p, e, clone(p, e))
				))
			}
			case Arrow(expr, vars, retType): {
				return cloneData(p, node, Node.Arrow(
					expr: cloneData(p, expr, clone(p, expr)),
					vars: vars.map(arg => cloneData(p, arg, clone(p, arg))),
					retType: retType
				))
			}
			case Static(f):
				return cloneData(p, node, Node.Static(cloneData(p, f, clone(p, f))))
			case Return(e): {
				if let e = e {
					return cloneData(p, node, Node.Return(cloneData(p, e, clone(p, e))))
				}
				return cloneData(p, node, Node.Return(null))
			}
			case Block(el): {
				return cloneData(p, node, Node.Block(
					el: el.map(arg => cloneData(p, arg, clone(p, arg)))
				))
			}
			case If(econd, eif, eelse, ternary): {
				return cloneData(p, node, Node.If(
					econd: econd.map(arg => cloneData(p, arg, clone(p, arg))),
					eif: cloneData(p, eif, clone(p, eif)),
					eelse: eelse != null ? cloneData(p, eelse, clone(p, eelse)) : null,
					ternary: ternary
				))
			}
			case Var(name, t, expr, const, external): {
				return cloneData(p, node, Node.Var(
					name: name,
					t: t,
					expr: cloneData(p, expr, clone(p, expr)),
					const: const,
					external: external
				))
			}
			case Function(name, body, vars, retType, external, variadic): {
				return cloneData(p, node, Node.Function(
					name: name,
					body: cloneData(p, body, clone(p, body)),
					vars: vars.map(arg => cloneData(p, arg, clone(p, arg))),
					// TODO vars: `[Node]`, somehow valid? Array of what? Fix
					retType: retType,
					external: external,
					variadic: variadic
				))
			}
			case Class(t, extend, implement, fields, external, kind):
				return cloneData(p, node, Node.Class(
					t: t,
					extend: extend,
					implement: implement,
					fields: fields.map(arg => cloneData(p, arg, clone(p, arg))),
					external: external,
					kind: kind
				))
			case Underscore: return cloneData(p, node, Node.Underscore)
			case Break: return cloneData(p, node, Node.Break)
			case Continue: return cloneData(p, node, Node.Continue)
			case null:
				return null
			case _:
		}

		console.log('Cannot clone', node)
		return node
	}

	/// Clones decorators and position
	static fun cloneData(project Project, from Node, to Node) Node {
		let project = project as! Any // TODO
		project.mapDecorators.set(to, project.mapDecorators.get(from))
		project.data.set(to, project.data.get(from))
		return to
	}
}
